{
  "Uuid": "0fadd300-7292-4f01-ab90-0afa3a98eed7",
  "IsCustomNode": true,
  "Category": "Healing",
  "Description": "",
  "Name": "Healing-Generation",
  "ElementResolver": {
    "ResolutionMap": {
      "Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSOffice.Data.ImportCSV@string,bool",
      "Id": "4aaca0c81c3e42a1afc0ccd2b191490b",
      "Inputs": [
        {
          "Id": "c92462973cec4ec3b816fa57a9c85380",
          "Name": "filePath",
          "Description": "CSV file to be converted into a list\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "33e67c20c35744e3a382953890266d7b",
          "Name": "transpose",
          "Description": "Toggle to transpose the imported data\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dc2b530dfb154275894f30f6a0922c90",
          "Name": "list",
          "Description": "List containing the items in the CSV file",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Imports data from a CSV (comma separated values) file, put the items into a list and transpose it if needed.\n\nData.ImportCSV (filePath: string, transpose: bool = false): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "4dcedf2f18dc4932b66317311a74457a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0503a1df00ee4659bb715fa2522a7f59",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\n\r\n# Get the Input\r\ninitialParameterFile = IN[0]\r\n\r\n# Export the file name with directory\r\nOUT = getFileDirectory(initialParameterFile)",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "27a215880e554613b867d59bdb98157b",
      "Inputs": [
        {
          "Id": "3f523459502f4324bc48f2735bd47f67",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9c18973def7f4159aabaaf9984363894",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nfrom wsgiref import validate\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\nimport pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib as mpl\r\nfrom matplotlib import cm\r\nfrom matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\nmpl.rcParams['text.usetex'] = True\r\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\nfrom mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\nimport scipy.stats as ss\r\nfrom scipy.stats import norm\r\nimport ast \r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import GlobalParametersManager\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\"\"\"\r\nSwitch types for Global Parameters by the assined value\r\n\"\"\"\r\n\r\n\r\ndef switchtypes_GlobalParameter(v):\r\n    if isinstance(v, ElementId):\r\n        return Autodesk.Revit.DB.ParameterType.Integer, Autodesk.Revit.DB.ElementIdParameterValue(v)\r\n    elif isinstance(v, int):\r\n        print (\"int\")\r\n        return Autodesk.Revit.DB.ParameterType.Integer, Autodesk.Revit.DB.IntegerParameterValue(v)\r\n    elif isinstance(v, float):\r\n        print (\"float\")\r\n        return Autodesk.Revit.DB.ParameterType.Number, Autodesk.Revit.DB.DoubleParameterValue(v)\r\n    elif isinstance(v, str):\r\n        print (\"str\")\r\n        return Autodesk.Revit.DB.ParameterType.Text, Autodesk.Revit.DB.StringParameterValue(v)\r\n    else:\r\n        return Autodesk.Revit.DB.ParameterType.Text,Autodesk.Revit.DB.StringParameterValue(v)\r\n\r\n\r\n\"\"\"\r\nSet Global Parameters by name and value \r\n\"\"\"\r\n\r\n\r\ndef set_GlobalParameter(doc,name,v):\r\n\r\n    # The element id of the global parameter is provided by the FindByName method.\r\n    existing_param_id = Autodesk.Revit.DB.GlobalParametersManager.FindByName(doc, name)\r\n\r\n    # If there's already a global parameter with the same name\r\n    if existing_param_id.ToString() != \"-1\":\r\n        doc.Delete(existing_param_id)\r\n\r\n    # Switch to the right ParameterType and ParameterValue type\r\n    pt, pv = switchtypes_GlobalParameter(v)\r\n    \r\n    # Create a new global parameter\r\n    para = Autodesk.Revit.DB.GlobalParameter.Create(doc,name,pt)\r\n\r\n    # Set the value for the global parameter\r\n    para.SetValue(pv)\r\n\r\n    return para\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\nnr_model = int(IN[0])\r\ncsvdata = IN[1]\r\n\r\n# zum hier, we can direclty query from the GlobalParametersManager.Names... not from the initial csv\r\n \r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log00.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\n# Set all global parameters by csv values based on the variation number: nr_model\r\nfor item in csvdata:\r\n    gp = set_GlobalParameter(doc, str(item[0]), item[nr_model])\r\n\r\n# Get all values \r\nparam_name_list = [str(item[0]) for item in csvdata]\r\nparam_id_list = [Autodesk.Revit.DB.GlobalParametersManager.FindByName(doc, item) for item in param_name_list]\r\nparam_list = [doc.GetElement(item) for item in param_id_list]\r\nparam_value_list = [item.GetValue().Value for item in param_list]\r\n\r\n# save by levels\r\nstorey_level_list = param_value_list[0:3]\r\nzone_level_list = [param_value_list[3:5],param_value_list[5:7],param_value_list[7:9],param_value_list[9:11]]\r\nspace_level_list= [[param_value_list[11]],param_value_list[12:15],param_value_list[15:19],[param_value_list[19]]]\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = [\r\n    storey_level_list,\r\n    zone_level_list,\r\n    space_level_list\r\n    ]\r\n\r\n# OUT = [\r\n#     param_value_list[0:3], \r\n#     param_value_list[3:5], \r\n#     param_value_list[5:7], \r\n#     param_value_list[7:9], \r\n#     param_value_list[9:11], \r\n#     [param_value_list[11]], \r\n#     param_value_list[12:15],\r\n#     param_value_list[15:19],\r\n#     [param_value_list[19]],\r\n#     ]",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "da1c7216f4cf40bd97393593c4339855",
      "Inputs": [
        {
          "Id": "c077198b0bfb482697b9d82752a5665e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "972fa544522144f2a648cdcf4b81915c",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3a250b0ce8a0479f91829801fbb05627",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "res;\nstorey_level = res[0];\nzone_level = res[1];\nspace_level = res[2];",
      "Id": "351a824d5a8b4a26a190854d7a4bb248",
      "Inputs": [
        {
          "Id": "595790b68d1b424db65bc27b8b9b0ee0",
          "Name": "res",
          "Description": "res",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6d3451cda26547cd978220cac6c279a9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7386aaf5e2524591a5723a0e040dd163",
          "Name": "",
          "Description": "storey_level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3fdf2305648b4d6eba8f78a5dfcc32fc",
          "Name": "",
          "Description": "zone_level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "479bcfea60854c60a693b8cc6676e698",
          "Name": "",
          "Description": "space_level",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.FloorTypes, DSRevitNodesUI",
      "SelectedIndex": 3,
      "SelectedString": "Generic - 12\" - Filled",
      "NodeType": "ExtensionNode",
      "Id": "be3b10a377bb4a9093a619d122a65e70",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "af9af13dbba04c89a6f7aafec2f30c85",
          "Name": "Floor Type",
          "Description": "The selected Floor Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All floor types available in the document."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 0.4,
      "MinimumValue": 0.1,
      "StepValue": 0.05,
      "InputValue": 0.15,
      "Id": "cdfa961c9847461d92f30c2ba5596a50",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "55a18bf43dba48558bcf0f6d92d4cd0b",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "a7e95e77e3954f618a17fdaa9df00d7c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "28f405b195b7461b85d6955d3b5cd67b",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "1bfc5d7733724849b64437ffb7373b8d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3c078fb08f954d40a739251d327e8202",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "e76e21f8b73545488f2680af27015141",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6ea2a943a422446f974c8d3d639e5598",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "DSRevitNodesUI.RoofTypes, DSRevitNodesUI",
      "SelectedIndex": 4,
      "SelectedString": "Sloped Glazing",
      "NodeType": "ExtensionNode",
      "Id": "3e0fa77c41374599b91332585e6fb2a9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "998991249a8b4e1cbb0cafabe97dde23",
          "Name": "Roof Types",
          "Description": "The selected Roof Types",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All roof types in the current document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "Point.ByCoordinates(0.0,0.0,0.0);",
      "Id": "7e5cd5bbb63c41a3a678c6a54beec3a5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d78ba53778994e6b841bf1b7d1350961",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 0.9,
      "MinimumValue": 0.6,
      "StepValue": 0.05,
      "InputValue": 0.85,
      "Id": "6cbe793e631049d7a2f770fd21177d63",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "eaa23da70db54c05849c4b9f17d8e815",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\nfrom itertools import combinations\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\"\"\"\r\nClear the model\r\n\"\"\"\r\n\r\n\r\ndef clear_model(bool_value):\r\n    doc.Regenerate()\r\n    if bool_value:\r\n        del_floor = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements()\r\n        del_wall = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements()\r\n        del_roof = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Roofs).WhereElementIsNotElementType().ToElements()\r\n        del_room = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().ToElements()\r\n        del_all = [del_floor, del_wall, del_roof, del_room]\r\n        for element_type in del_all:\r\n            for element in element_type:\r\n                doc.Delete(element.Id)\r\n\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\n\"\"\"\r\nCreate the levels\r\n\"\"\"\r\n\r\n\r\ndef create_levels(level_elevations):\r\n    ref_level_z = level_elevations[0]\r\n    print level_elevations\r\n    print ref_level_z\r\n\r\n    # Collect all levels\r\n    levelArray = (FilteredElementCollector(doc)\r\n        .OfCategory(BuiltInCategory.OST_Levels)\r\n        .WhereElementIsNotElementType()\r\n        .ToElements())\r\n    \r\n    # Clean the Level 0\r\n    # Check the number of the existing levels, if multiple, delete and save only one\r\n    if levelArray.Count > 1:\r\n        for levelElement in levelArray:\r\n            if levelElement.Elevation != ref_level_z:\r\n                doc.Delete(levelElement.Id)\r\n    ref_level = levelArray[0]\r\n    ref_level.Name = \"Level0\"\r\n    # Check the if the saved one is the reference level, correct it if not\r\n    if ref_level.Elevation != ref_level_z:\r\n        ref_level_new = Autodesk.Revit.DB.Level.Create(doc, ref_level_z)\r\n        doc.Delete(ref_level.Id)\r\n        ref_level = ref_level_new\r\n        ref_level.Name = \"Level0\"\r\n    \r\n    # Create all levels needed\r\n    for nb_levels in range(len(level_elevations)-1):\r\n        new_level = Autodesk.Revit.DB.Level.Create(doc, level_elevations[nb_levels+1])\r\n        new_level.ToDSType(True).SetParameterByName(\"Name\", \"Level\"+str(nb_levels+1))\r\n        doc.Regenerate()\r\n\r\n    levelArray = (FilteredElementCollector(doc)\r\n        .OfCategory(BuiltInCategory.OST_Levels)\r\n        .WhereElementIsNotElementType()\r\n        .ToElements())\r\n    return levelArray\r\n\r\n\r\n\"\"\"\r\nClear existing grids\r\n\"\"\"\r\n\r\n\r\ndef clear_grids(bl):\r\n    if (bl):\r\n        doc.Regenerate()\r\n        del_grid = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType().ToElements()\r\n        for element in del_grid:\r\n            doc.Delete(element.Id)\r\n\r\n\r\n\"\"\"\r\nAdd new grids by x or y \r\n\"\"\"\r\n\r\ndef add_grids(glob_ref, dir, val=0):\r\n    dim_x, dim_y, ref_x, ref_y, ref_z = glob_ref\r\n\r\n    if dir == \"Y\":\r\n        pp1 = Geometry.Point.ByCoordinates(ref_x,val,ref_z)\r\n        pp2 = Geometry.Point.ByCoordinates(ref_x+dim_x,val,ref_z)\r\n        ll = Geometry.Line.ByStartPointEndPoint(pp1, pp2).ToRevitType()\r\n    elif dir == \"X\":\r\n        pp1 = Geometry.Point.ByCoordinates(val,ref_y,ref_z)\r\n        pp2 = Geometry.Point.ByCoordinates(val,ref_y+dim_y,ref_z)\r\n        ll = Geometry.Line.ByStartPointEndPoint(pp1, pp2).ToRevitType()        \r\n    new_grid = Grid.Create(doc,ll)\r\n    return new_grid\r\n\r\n\"\"\"\r\nrenumber all grids (to improve)\r\n\"\"\"\r\ndef rename_grids(bl):\r\n    if (bl):\r\n        rename_grid = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType().ToElements()\r\n        nb_gds = 1\r\n        for gg in rename_grid:\r\n            gg.ToDSType(True).SetParameterByName(\"Name\", str(nb_gds))\r\n            nb_gds +=1\r\n    doc.Regenerate()\r\n\r\n\r\n\"\"\"\r\nbuild room zone\r\n\"\"\"\r\ndef room_zone(glob_ref,glob_grids,rm_zones_cord):\r\n    glob_grids = [glob_grids[int(rm_zones_cord[0]-1)], glob_grids[int(rm_zones_cord[1]-1)]]\r\n\r\n    grid_segments_X = rm_zones_cord[2]\r\n    grid_segments_Y = rm_zones_cord[3]\r\n    \r\n    rm_glob_grids = []\r\n    rm_bound_grids = []\r\n    for gg in glob_grids:\r\n        if gg.Curve.ToProtoType().StartPoint.X == gg.Curve.ToProtoType().EndPoint.X:\r\n            bound_grids = add_grids(glob_ref, \"Y\", grid_segments_Y).ToDSType(True)\r\n            rm_glob_grids.append(gg.ToDSType(True))\r\n        elif gg.Curve.ToProtoType().StartPoint.Y == gg.Curve.ToProtoType().EndPoint.Y:\r\n            bound_grids = add_grids(glob_ref, \"X\", grid_segments_X).ToDSType(True)\r\n            rm_glob_grids.append(gg.ToDSType(True))\r\n        rm_bound_grids.append(bound_grids)\r\n    rm_grids = [rm_glob_grids,rm_bound_grids]\r\n    \r\n    return rm_grids\r\n\r\n\r\n\"\"\"\r\nfind the intersection point from two lines\r\n\"\"\"\r\n\r\n\r\ndef intersectionPointOfLines(line_1, line_2):\r\n    def det(a, b):\r\n        return a[0] * b[1] - a[1] * b[0]\r\n\r\n    line1 = [[line_1.StartPoint.X, line_1.StartPoint.Y], [\r\n        line_1.EndPoint.X, line_1.EndPoint.Y]]\r\n    line2 = [[line_2.StartPoint.X, line_2.StartPoint.Y], [\r\n        line_2.EndPoint.X, line_2.EndPoint.Y]]\r\n    xdiff = [line1[0][0] - line1[1][0], line2[0][0] - line2[1][0]]\r\n    ydiff = [line1[0][1] - line1[1][1], line2[0][1] - line2[1][1]]\r\n    div = det(xdiff, ydiff)\r\n\r\n    if (bool(line_1.Intersect(line_2))):\r\n        case = 0\r\n        pt_intersection = line_1.Intersect(line_2)[0]\r\n        if line_1.StartPoint.IsAlmostEqualTo(line_2.StartPoint) or line_1.StartPoint.IsAlmostEqualTo(line_2.EndPoint) or line_1.EndPoint.IsAlmostEqualTo(line_2.StartPoint) or line_1.EndPoint.IsAlmostEqualTo(line_2.EndPoint):\r\n            mutual_inter = False\r\n        else:\r\n            mutual_inter = True\r\n    else:\r\n        pt_intersection = None\r\n        mutual_inter = False\r\n        if abs(div) < 0.0001:\r\n            case = 1\r\n        else:\r\n            case = 2\r\n    return case,pt_intersection,mutual_inter\r\n\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\nglob_ref_pt = UnwrapElement(IN[0])\r\nstorey_zone_space_levels_list = IN[1]\r\nrm_zones_ori = IN[2]\r\n\r\nstorey_level_list, zone_level_list, space_level_list = storey_zone_space_levels_list\r\nglob_dim_x = float(storey_level_list[0])\r\nglob_dim_y = float(storey_level_list[1])\r\nlevel_elevations = foot_to_meter([0,storey_level_list[2]])\r\n\r\n# level_elevations = foot_to_meter(IN[1])\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log04.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nclear_model(True)\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\n# Preprocess the zones of rooms\r\n# if the local reference point of a zone (of room(s)) = (0,0), there's no zone in this corner.\r\nrm_zones_adt = []\r\nfor zz in rm_zones_ori:\r\n    if zz[2]!=0 or zz[3]!=0:\r\n        rm_zones_adt.append(zz)\r\n    else:\r\n        continue\r\nrm_zones_cord = [zz[:-1] for zz in rm_zones_adt]\r\nrm_seps_cord_relative = [zz[-1] for zz in rm_zones_adt]\r\n\r\n# Create building references\r\nglob_ref_x,glob_ref_y,glob_ref_z = foot_to_meter(glob_ref_pt.X),foot_to_meter(glob_ref_pt.Y),foot_to_meter(glob_ref_pt.Z)\r\nglob_ref = [glob_dim_x, glob_dim_y, glob_ref_x, glob_ref_y, glob_ref_z]\r\n\r\n# Create storey references \r\nlevels = create_levels(level_elevations)\r\ncollector = FilteredElementCollector(doc)\r\nlevels = collector.OfClass(Level).ToElements()\r\n\r\n# Clear the old grids\r\nclear_grids(True)\r\n\r\n# Create global grids \r\nglob_grids = []\r\nglob_grids_cod = [[\"X\",glob_ref_x],[\"Y\",glob_dim_y],[\"X\",glob_dim_x],[\"Y\",glob_ref_y]]\r\nfor i in range(len(glob_grids_cod)):\r\n    glob_grids.append(add_grids(glob_ref, glob_grids_cod[i][0], glob_grids_cod[i][1])) \r\n\r\n# Rename the global grids\r\nrename_grids(True)\r\n\r\n# Create room zone grids \r\nrm_zones_grids = []\r\nfor rm_zone in rm_zones_cord:\r\n    rm_zone_grids = room_zone(glob_ref,glob_grids,rm_zone)\r\n    rm_zones_grids.append(rm_zone_grids)\r\n\r\n# Find the crossed points for each zone\r\nrm_zones_pts = []\r\nfor ii in range(len(rm_zones_grids)):\r\n    [g1,g2] = rm_zones_grids[ii]\r\n    g12 = g1 + g2\r\n    rm_zones_starting_grids_x, rm_zones_starting_grids_y = [],[]\r\n    gg_curve = []\r\n    pts_inter = []\r\n    for comb_gg in combinations(g12, 2):\r\n        pt_inter = intersectionPointOfLines(comb_gg[0].Curve, comb_gg[1].Curve)[1]\r\n        if pt_inter!=None:\r\n            pts_inter.append(pt_inter)\r\n        else:\r\n            continue\r\n    rm_zones_pts.append(pts_inter)\r\n\r\n# Convert rm_seps_cord_relative to rm_seps_cord\r\nrm_zones_starting_pts = []\r\nfor zne in rm_zones_pts:\r\n    pt_min = zne[0]\r\n    for ii in range(1,len(zne),1):\r\n        pt_min = zne[ii] if zne[ii].X <= pt_min.X and zne[ii].Y <= pt_min.Y else pt_min\r\n    rm_zones_starting_pts.append(pt_min)\r\nrm_seps_cord = []\r\n\r\nfor ii in range(len(rm_seps_cord_relative)):\r\n    one_rm_seps = []\r\n    for cord in rm_seps_cord_relative[ii]:\r\n        cord = cord + rm_zones_starting_pts[ii].X\r\n        one_rm_seps.append(cord)\r\n    rm_seps_cord.append(one_rm_seps)\r\n\r\n# Create room separation grids\r\nfor ii in range(len(rm_zones_grids)):\r\n    rm_seps_grids = [add_grids(glob_ref, \"X\", sep) for sep in rm_seps_cord[ii]]\r\n    rm_zones_grids[ii].append(rm_seps_grids)\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = [ glob_ref,glob_grids,\r\n        rm_seps_cord_relative,rm_seps_cord,\r\n        rm_zones_cord,rm_zones_grids,rm_zones_pts\r\n        ]\r\n\r\n#   - - - - - - - - - - OUT - - - - - - - - - -\r\n#   OUT[0] \r\n#   glob_ref [values] \r\n#   glob_dim_x, glob_dim_y, glob_ref_x, glob_ref_y, glob_ref_z\r\n\r\n#   OUT[1]\r\n#   glob_grids [lines]\r\n#   the grids corresponding to glob_ref\r\n\r\n#   OUT[2]\r\n#   rm_seps_cord_relative [values]\r\n#   the relative positions of the rooms in each room zone (in X direction)\r\n\r\n#   OUT[3]\r\n#   rm_seps_cord [values] \r\n#   the absolute positions of the rooms in each room zone (in X direction)\r\n\r\n#   OUT[4]\r\n#   rm_zones_cord [values]\r\n#   global references the zones attached to, the dimensions of zones in X,Y directions\r\n\r\n#   OUT[5]\r\n#   rm_zones_grids [lines]\r\n#   all grids corresponding to a room zone\r\n\r\n#   OUT[6]\r\n#   rm_zones_pts [points]\r\n#   the crossed point of a room zone\r\n\r\n#   - - - - - - - - - - - - - - - - - - - - - ",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "9c57fc090431475ab3ffaa78bb07ce36",
      "Inputs": [
        {
          "Id": "bc595d364a134a29b4c11ed33d7dfe03",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0be8e9fc04dd410fb5874a181ada005d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c8311320fa1a46bf81bde1359b89b843",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3d7ab45573be4c348c9d9afe528b8449",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.WallTypes, DSRevitNodesUI",
      "SelectedIndex": 14,
      "SelectedString": "Generic - 6\"",
      "NodeType": "ExtensionNode",
      "Id": "359879f7b851408daa085bf67e19bd56",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "acf01179862945d8b72f9807e0f600f4",
          "Name": "Wall Type",
          "Description": "The selected Wall Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All wall types available in the document."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 0.3,
      "MinimumValue": 0.1,
      "StepValue": 0.05,
      "InputValue": 0.25,
      "Id": "bf49c602c5954a53a8bae278c3db4b9f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4b43f315c4e848c69f37b27638435d97",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "bdry_min;\nbdry_max;\nstep;\ntol = [bdry_min, bdry_max, step];",
      "Id": "a6469d73c55f4f06ad1f063425bfcf0b",
      "Inputs": [
        {
          "Id": "ab2dd0ccdb134d5bb3c06c3bf4529c3b",
          "Name": "bdry_min",
          "Description": "bdry_min",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7f774d647ead479d86b2422f2d0b53fe",
          "Name": "bdry_max",
          "Description": "bdry_max",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c70f57b58bf64db8a881d0e28134400b",
          "Name": "step",
          "Description": "step",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3b7954551acb4c848b97caa3e3dc6ad5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f632e01e1c3043a3ba2682d47ec05bb2",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "108e90bc701f4badaf33357787bd4d94",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ad240a958a3843cd95b66b1649343561",
          "Name": "",
          "Description": "tol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\nconstraintForStorey = IN[0]\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log02.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\ngridsForZones  = []\r\n\r\n# if the constraints are applied\r\nif constraintForStorey:\r\n    gridsForZones  = [[1,2],[2,3],[3,4],[4,1]]\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = gridsForZones\r\n\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "4e1fb8e8d52c43329704384af395596a",
      "Inputs": [
        {
          "Id": "fea9e11b28a44b2ab1da58339a89b3ef",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "00fe445d65004ba79be8414a39af972d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.WallTypes, DSRevitNodesUI",
      "SelectedIndex": 17,
      "SelectedString": "Generic - 8\" - Filled",
      "NodeType": "ExtensionNode",
      "Id": "e32c2c834fb642f38f524f06f6cdc51a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a362e342ed7540f1969c325fc6475312",
          "Name": "Wall Type",
          "Description": "The selected Wall Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All wall types available in the document."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\nfrom Revit import GeometryConversion as gc\r\nfrom itertools import combinations\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\"\"\"\r\nClear the model\r\n\"\"\"\r\n\r\n\r\ndef clear_model(bool_value):\r\n    doc.Regenerate()\r\n    if bool_value:\r\n        del_floor = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements()\r\n        del_wall = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements()\r\n        del_roof = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Roofs).WhereElementIsNotElementType().ToElements()\r\n        del_room = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Rooms).WhereElementIsNotElementType().ToElements()\r\n        del_all = [del_floor, del_wall, del_roof, del_room]\r\n        for element_type in del_all:\r\n            for element in element_type:\r\n                doc.Delete(element.Id)\r\n\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\n\"\"\"\r\nfind the intersection point from two lines\r\n\"\"\"\r\n\r\n\r\ndef intersectionPointOfLines(line_1, line_2):\r\n    def det(a, b):\r\n        return a[0] * b[1] - a[1] * b[0]\r\n\r\n    line1 = [[line_1.StartPoint.X, line_1.StartPoint.Y], [\r\n        line_1.EndPoint.X, line_1.EndPoint.Y]]\r\n    line2 = [[line_2.StartPoint.X, line_2.StartPoint.Y], [\r\n        line_2.EndPoint.X, line_2.EndPoint.Y]]\r\n    xdiff = [line1[0][0] - line1[1][0], line2[0][0] - line2[1][0]]\r\n    ydiff = [line1[0][1] - line1[1][1], line2[0][1] - line2[1][1]]\r\n    div = det(xdiff, ydiff)\r\n\r\n    if (bool(line_1.Intersect(line_2))):\r\n        case = 0\r\n        pt_intersection = line_1.Intersect(line_2)[0]\r\n        if line_1.StartPoint.IsAlmostEqualTo(line_2.StartPoint) or line_1.StartPoint.IsAlmostEqualTo(line_2.EndPoint) or line_1.EndPoint.IsAlmostEqualTo(line_2.StartPoint) or line_1.EndPoint.IsAlmostEqualTo(line_2.EndPoint):\r\n            mutual_inter = False\r\n        else:\r\n            mutual_inter = True\r\n    else:\r\n        pt_intersection = None\r\n        mutual_inter = False\r\n        if abs(div) < 0.0001:\r\n            case = 1\r\n        else:\r\n            case = 2\r\n    return case,pt_intersection,mutual_inter\r\n\r\n\r\n\"\"\"\r\nCustomizedWall\r\n\"\"\"\r\n\r\n\r\nclass CustomizedWall:\r\n    def __init__(self, level1, level2, walltype):\r\n        self.level_b = level1\r\n        self.level_t = level2\r\n        self.type = walltype\r\n\r\n    def wallByLine(self, doc, line_loc):\r\n        self.curve = line_loc\r\n        self.flipped = False\r\n        self.ww = Autodesk.Revit.DB.Wall.Create(doc, self.curve, self.type.Id, self.level_b.Id,\r\n            abs(self.level_t.Elevation-self.level_b.Elevation), 0, self.flipped, False)\r\n        #self.ww = Autodesk.Revit.DB.Wall.Create(doc, self.curve, ElementId(\r\n        #    self.type.Id), ElementId(self.level_b.Id), foot_to_meter(abs(self.level_t.Elevation-self.level_b.Elevation)), 0, False, False)\r\n\r\n\"\"\"\r\nCustomizedzone, [CustomizedWall-embedded]\r\n\"\"\"\r\n\r\n\r\nclass CustomizedZone:\r\n    def __init__(self, level1, level2, rm_zone_grids):\r\n        self.level_b = level1\r\n        self.level_t = level2\r\n        self.outer_grids = rm_zone_grids[0]\r\n        self.zone_grids = rm_zone_grids[1]\r\n        self.sep_grids = rm_zone_grids[2]\r\n        self.pt_out_out = []\r\n        self.pt_out_zne = []\r\n        self.pt_zne_zne = []\r\n        self.pt_zne_sep = []\r\n\r\n    def zoneAnalysis(self):\r\n        self.outer_lines = [gg.Curve.ToProtoType() for gg in self.outer_grids]\r\n        self.zone_lines = [gg.Curve.ToProtoType() for gg in self.zone_grids]\r\n        self.sep_lines = [gg.Curve.ToProtoType() for gg in self.sep_grids]\r\n\r\n        res_out_out = intersectionPointOfLines(self.outer_lines[0], self.outer_lines[1])\r\n        self.pt_out_out.append(res_out_out[1])\r\n\r\n        #print \"\\n Start outerline and zoneline interaction analysis: \"\r\n        for l1 in self.outer_lines:\r\n            for l2 in self.zone_lines:\r\n                res_out_zne = intersectionPointOfLines(l1, l2)\r\n                if res_out_zne[1] == None:\r\n                    #print \"pt_out_zne, no interaction *1\"\r\n                    continue\r\n                else:\r\n                    self.pt_out_zne.append(res_out_zne[1])\r\n\r\n        #print \"\\n Start zoneline and zoneline interaction analysis: \"\r\n        res_zne_zne = intersectionPointOfLines(\r\n            self.zone_lines[0], self.zone_lines[1])\r\n        self.pt_zne_zne.append(res_zne_zne[1])\r\n\r\n        #print \"\\n Start sepline and all the other lines interaction analysis: \"\r\n        outer_zone_lines = self.outer_lines + self.zone_lines\r\n        for l1 in outer_zone_lines:\r\n            for l2 in self.sep_lines:\r\n                res_sep = intersectionPointOfLines(l1, l2)\r\n                if res_sep[1] == None:\r\n                    # print \"pt_zne_sep, no interaction *1\"\r\n                    continue\r\n                else:\r\n                    self.pt_zne_sep.append(res_sep[1])\r\n\r\n    def zoneWalls(self, doc, walltype):\r\n        # \r\n        self.outer_walllines = []\r\n        self.zone_walllines = []\r\n        self.sep_walllines = []\r\n\r\n        for pt in self.pt_out_zne:\r\n            for pt_new in self.pt_zne_zne:\r\n                pt_xyz = UnwrapElement(pt).ToRevitType()\r\n                pt_new_xyz = UnwrapElement(pt_new).ToRevitType()\r\n                zone_l = Autodesk.Revit.DB.Line.CreateBound(pt_xyz,pt_new_xyz)\r\n                self.zone_walllines.append(zone_l)\r\n        \r\n        for comb_pt in combinations(self.pt_zne_sep, 2):\r\n            # ********** to improve the condition here, for separation lines **********\r\n            if abs (comb_pt[0].X - comb_pt[1].X) <= 0.001:\r\n                pt_xyz = UnwrapElement(comb_pt[0]).ToRevitType()\r\n                pt_new_xyz = UnwrapElement(comb_pt[1]).ToRevitType()                \r\n                zone_s = Autodesk.Revit.DB.Line.CreateBound(pt_xyz,pt_new_xyz)\r\n                self.sep_walllines.append(zone_s)\r\n        \r\n        self.wall_type = walltype\r\n        self.zone_walls = []\r\n        self.sep_walls = []\r\n        self.all_walls_inzone = []\r\n\r\n        for wline in self.zone_walllines:\r\n            zone_wall = CustomizedWall(self.level_b, self.level_t, self.wall_type)\r\n            zone_wall.wallByLine(doc, wline)\r\n            self.zone_walls.append(zone_wall)\r\n            self.all_walls_inzone.append(zone_wall)\r\n        \r\n        for wline in self.sep_walllines:\r\n            sep_wall = CustomizedWall(self.level_b, self.level_t, self.wall_type)\r\n            sep_wall.wallByLine(doc, wline)\r\n            self.sep_walls.append(sep_wall)\r\n            self.all_walls_inzone.append(sep_wall)\r\n\r\n\r\n\"\"\"\r\nProvide the geometry of slab by level...\r\n\"\"\"\r\n\r\n\r\ndef find_perimeter_lines(x,y,level):\r\n    zz = level.Elevation\r\n    xx = x\r\n    yy = y \r\n    line_1 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,0,zz),    XYZ(xx,0,zz))\r\n    line_2 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,0,zz),   XYZ(xx,yy,zz))\r\n    line_3 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,yy,zz),  XYZ(0,yy,zz))\r\n    line_4 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,yy,zz),   XYZ(0,0,zz))\r\n    \r\n    perimeter_geometry = CurveArray()\r\n    perimeter_geometry.Append(line_1)\r\n    perimeter_geometry.Append(line_2)\r\n    perimeter_geometry.Append(line_3)\r\n    perimeter_geometry.Append(line_4)\r\n    return perimeter_geometry\r\n\r\n\r\n\"\"\"\r\nFlip an object horizontally ...\r\n\"\"\"\r\ndef FlipObject(item):\r\n    if hasattr(item, \"Flip\"):\r\n        try:\r\n            item.Flip()\r\n            return True\r\n        except: return False\r\n    else: return False\r\n\r\n\r\n\"\"\"\r\nCreat XYZ from a startpoint and a endpoint\r\n\"\"\"\r\n\r\n\r\ndef XYZfromPoints(startpoint,endpoint):\r\n    \r\n    delta_x = endpoint.X - startpoint.X \r\n    delta_y = endpoint.Y - startpoint.Y \r\n    delta_z = endpoint.Z - startpoint.Z \r\n    return XYZ(delta_x,delta_y,delta_z)\r\n\r\n\r\n\"\"\"\r\nGet the exterior oritentation of a wall ...\r\n\"\"\"\r\n\r\n\r\ndef GetExteriorWallDirection(item):\r\n    if type(item) == Autodesk.Revit.DB.Wall:\r\n        locationCurve = item.Location\r\n        if locationCurve != None:\r\n            curve = locationCurve.Curve\r\n            direction = XYZ.BasisX\r\n            if type(curve) == Autodesk.Revit.DB.Line:\r\n                direction = curve.ComputeDerivatives(0, True).BasisX.Normalize()\r\n            else:\r\n                direction = (curve.GetEndPoint(1) - curve.GetEndPoint(0)).Normalize()\r\n            exteriorDirection = XYZ.BasisZ.CrossProduct(direction)\r\n            \r\n            if item.Flipped:\r\n                exteriorDirection = -exteriorDirection\r\n            return exteriorDirection.ToVector()\r\n    else:\r\n        return \"Not a Wall\"\r\n\r\n\r\n\"\"\"\r\nFlip a wall according a supposed-inner reference point\r\n\"\"\"\r\n\r\n\r\ndef flapWallByRefPoint(ori_wall,refpt):\r\n    ori_dir = GetExteriorWallDirection(ori_wall).ToRevitType()\r\n    wallline_pts = [ori_wall.Location.Curve.ToProtoType().StartPoint, ori_wall.Location.Curve.ToProtoType().EndPoint]\r\n    wallline_mdpt = Autodesk.Revit.DB.Point.Create(wallline_pts[0].ToRevitType()/2 + wallline_pts[1].ToRevitType()/2).ToProtoType()\r\n    vec = XYZfromPoints(refpt,wallline_mdpt)\r\n    if ori_dir.DotProduct(vec) >= 0:\r\n        # no need to flip\r\n        return False\r\n    else:\r\n        # need to flip\r\n        if hasattr(ori_wall, \"Flip\"):\r\n            ori_wall.Flip()\r\n        return True\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\nOUT_createReferences = UnwrapElement(IN[0])\r\nglob_ref,glob_grids,rm_seps_cord_relative,rm_seps_cord,rm_zones_cord,rm_zones_grids,rm_zones_pts = OUT_createReferences\r\n\r\nOUT_setMaterial = UnwrapElement(IN[1])\r\nfloor_type, roof_type, int_wall_type, ext_wall_type, window_type, int_door_type, ext_door_type = OUT_setMaterial\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log06.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nclear_model(True)\r\n\r\ncollector = FilteredElementCollector(doc)\r\nlevels = collector.OfClass(Level).ToElements()\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\n# Create exterior walls\r\nwall_exterior = []\r\nglob_centerpt  = Autodesk.Revit.DB.Point.Create(XYZ(foot_to_meter(glob_ref[0]/2), foot_to_meter(glob_ref[1]/2),foot_to_meter(levels[0].Elevation))).ToProtoType()\r\n\r\nfor glob_g in glob_grids:\r\n    glob_g_line = glob_g.Curve#.ToRevitType(True)\r\n    outerwall =  CustomizedWall(levels[0], levels[1], ext_wall_type)\r\n    outerwall.wallByLine(doc, glob_g_line)\r\n    wall_exterior.append(outerwall)\r\n\r\n# Room zone creation\r\nroom_zones = []\r\nfor rm_zone_grids in rm_zones_grids:\r\n    room_zone = CustomizedZone(levels[0], levels[1],rm_zone_grids)\r\n    room_zone.zoneAnalysis()\r\n    room_zone.zoneWalls(doc, int_wall_type)\r\n    room_zones.append(room_zone)\r\n\r\n# Collect interior walls\r\nwall_interior = []\r\nwall_interior_rm_cr = []\r\nwall_interior_rm_rm = []\r\nfor rz in room_zones:\r\n    wall_interior_rm_cr.append(rz.zone_walls)\r\n    wall_interior_rm_rm.append(rz.sep_walls)\r\n    wall_interior.append(rz.all_walls_inzone)\r\n\r\n# Flatten the list of interior walls\r\nwall_interior = [element for sublist in wall_interior for element in sublist]\r\n\r\n# Create the building floor\r\nperimeter_floor = find_perimeter_lines(foot_to_meter(glob_ref[0]),foot_to_meter(glob_ref[1]),levels[0])\r\nbuilding_floor= doc.Create.NewFloor(perimeter_floor, UnwrapElement(floor_type), UnwrapElement(levels[0]), True)\r\n\r\n# Create the building roof/ceiling\r\nroof_Array = clr.StrongBox[ModelCurveArray](ModelCurveArray())\r\nperimeter_roof = find_perimeter_lines(foot_to_meter(glob_ref[0]),foot_to_meter(glob_ref[1]),levels[1])\r\nbuilding_roof = doc.Create.NewFootPrintRoof(perimeter_roof, UnwrapElement(levels[1]), UnwrapElement(roof_type), roof_Array)  \r\n\r\n# Adapat part of the exterior and interiror walls' orientations and archive orientation adapataion\r\nwall_exterior_flippers, wall_interior_flippers = [], []\r\n\r\n# Flap exterior walls if needed\r\nfor ww in wall_exterior:\r\n    if flapWallByRefPoint(ww.ww,glob_centerpt):\r\n        wall_exterior_flippers.append([ww.ww, 'True'])\r\n    else:\r\n        wall_exterior_flippers.append([ww.ww, 'False'])\r\n\r\n# Flap interior walls if needed\r\nfor ww in wall_interior:\r\n    if flapWallByRefPoint(ww.ww,glob_centerpt):\r\n        wall_interior_flippers.append([ww.ww, 'True'])\r\n    else:\r\n        wall_interior_flippers.append([ww.ww, 'False'])\r\n\r\nwall_flippers = [wall_exterior_flippers, wall_interior_flippers]\r\ndoc.Regenerate()\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n##############################s#################################\r\n# Prepare the output \r\n###############################################################\r\nOUT_createGeo = [wall_flippers,wall_exterior,wall_interior,wall_interior_rm_cr,wall_interior_rm_rm,building_floor,building_roof,room_zones]\r\nOUT = [OUT_createReferences,OUT_setMaterial,OUT_createGeo]\r\n\r\n#   - - - - - - - - - - OUT - - - - - - - - - -\r\n#   OUT[0] \r\n#   OUT_createReferences\r\n#   glob_ref,glob_grids,rm_seps_cord_relative,rm_seps_cord,rm_zones_cord,rm_zones_grids,rm_zones_pts\r\n\r\n#   OUT[1]\r\n#   OUT_setMaterial\r\n#   floor_type, roof_type, int_wall_type, ext_wall_type, window_type, int_door_type, ext_door_type\r\n\r\n#   OUT[2]\r\n#   OUT_createGeo\r\n#   wall_flippers,wall_exterior,wall_interior,wall_interior_rm_cr,wall_interior_rm_rm,building_floor,building_roof,room_zones\r\n\r\n#   - - - - - - - - - - - - - - - - - - - - -\r\n\r\n\r\n# ========================================================================================\r\n# # Prob1 # #\r\n# (Autodesk.DesignScript.Geometry.Curve), but was called with (Autodesk.Revit.DB.Curve[]). \r\n# # Prob2 # #\r\n# https://forum.dynamobim.com/t/create-floor-python/51048/7\r\n# https://forum.dynamobim.com/t/problem-with-floor-byoutlinetypeandlevel/42417\r\n# ========================================================================================",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "62c40dfc8ec649018e4d8ab670a42361",
      "Inputs": [
        {
          "Id": "ee3395d0468742f0ad360b081354cb5c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2e85e33527d47339e8c93bb2010c74b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "76ae31f7e79d4e23a7f29d55a49fb565",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\r\n\"\"\"\r\nClear the model\r\n\"\"\"\r\n\r\n\r\ndef clear_model(bool_value):\r\n    doc.Regenerate()\r\n    if bool_value:\r\n        del_door = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Doors).WhereElementIsNotElementType().ToElements()\r\n        del_floor = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements()\r\n        del_wall = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements()\r\n        del_roof = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Roofs).WhereElementIsNotElementType().ToElements()\r\n        del_all = [del_door, del_floor, del_wall, del_roof]\r\n        for element_type in del_all:\r\n            for element in element_type:\r\n                doc.Delete(element.Id)\r\n\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\nfloor_type = UnwrapElement(IN[0])\r\nroof_type = UnwrapElement(IN[1])\r\nint_wall_type = UnwrapElement(IN[2])\r\next_wall_type = UnwrapElement(IN[3])\r\nwindow_type = UnwrapElement(IN[4])\r\nint_door_type = UnwrapElement(IN[5])\r\next_door_type = UnwrapElement(IN[6])\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log03.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\ntypes_to_activate = [UnwrapElement(window_type), UnwrapElement(int_door_type), UnwrapElement(ext_door_type)]\r\nfor ty in types_to_activate:\r\n    if ty.IsActive == False:\r\n        ty.Activate()\r\n        doc.Regenerate()\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = floor_type, roof_type, int_wall_type, ext_wall_type, window_type, int_door_type, ext_door_type\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "02af2caa4b5646beb4d45a1652d7495e",
      "Inputs": [
        {
          "Id": "dedec1f48b29480fb5d969f3d64e8e0b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "30b3d72ef85d41ffaa0aa8e60e3ebf1e",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4dd7c4580b3b4dcc828e338eb8735a7d",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "22be390082e84222974b4e0cd3accdb9",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a2b75d38e46b487c9ea0945160eb2316",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4eb30f18ffb445ea94dca7730567f115",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f7002d79fb51451a8b35988751e748df",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0fb6b3d4664e4492874e0cddf34e94a0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 182,
      "SelectedString": "Window-Casement-Double:48\" x 60\"",
      "NodeType": "ExtensionNode",
      "Id": "915ee9f9feb24cfc86293d0aecf86452",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "03136bf64a534e97b07f1b5283890365",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 130,
      "SelectedString": "Single-Flush:30\" x 80\"",
      "NodeType": "ExtensionNode",
      "Id": "ab4dbfeeaf224b96887f45da12b01413",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "66646e0adfbf4af098d1465a777bbe8a",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0.05;",
      "Id": "272b16050ee24e6fae04195ef017b45a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "085b7a4d995d4b9792d207e6d6882c8e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0.65;",
      "Id": "a8d0477d729a481193d72bd90146844f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3e555b687cd04b999a283d46dc0da630",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 136,
      "SelectedString": "Single-Flush:36\" x 84\"",
      "NodeType": "ExtensionNode",
      "Id": "b305e7ae621c4dac89ede224b748e3cc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a30d33de8c064db292dad29bde1bfe45",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[[-0.60,0.50],[-0.90,-0.55,0.20,0.75]\n,[-0.70,0.60],[-0.35,0.10,0.70]];",
      "Id": "9d29380d57a74875a36c76878d134c78",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ad778ea729e24a3aaa424bd5f0216aae",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\n\"\"\"\r\nconfigurate a list\r\n\"\"\"\r\n\r\n\r\ndef configurelist(li):\r\n    def sortlist(li):\r\n        li.sort()\r\n        return li\r\n\r\n    if len(li) == 1:\r\n        if li[0] == 0:\r\n            return []\r\n        else:\r\n            return li\r\n    elif len(li) > 1:\r\n        return sortlist(li)\r\n\r\n\r\n\"\"\"\r\nscale the list to a suitable range\r\n\"\"\"\r\n\r\n\r\ndef scalelist(li, bdry_value):\r\n    \r\n    # if there's no zone, return an empty list\r\n    if bdry_value == 0:\r\n        return []\r\n    \r\n    # decide whether we need to scale the list\r\n    scale = False\r\n    for item in li:\r\n        if item >= bdry_value:\r\n            scale = True\r\n            break\r\n    \r\n    # if it needs to be scaled\r\n    if scale:\r\n        scale_base = max(li) + min(li)\r\n        li = [round(item * bdry_value / scale_base, 1) for item in li]\r\n\r\n    return li\r\n\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\nstorey_zone_space_levels_list = IN[0]\r\nconstraintForSpace = IN[1]\r\n\r\nstorey_level_list, zone_level_list, space_level_list = storey_zone_space_levels_list\r\ngx, gy, gz = storey_level_list\r\n[x1, y1],[x2, y2], [x3, y3], [x4, y4] = zone_level_list\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log02.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\n# if the constraints are applied\r\nif constraintForSpace:\r\n    # Update the list of room separation locations for all zones\r\n    li_all_zones = []\r\n    for zz in space_level_list:\r\n        li_zone = configurelist(zz)\r\n        li_all_zones.append(li_zone)\r\n\r\n    # Find the bondary values for each room zone\r\n    li_all_zones_bdry = [\r\n        x1,\r\n        gx - x2,\r\n        gx - x3,\r\n        x4]\r\n\r\n    li_all_zones_scaled = []\r\n    for ii in range(len(li_all_zones)):\r\n        li_all_zones_scaled.append(scalelist(li_all_zones[ii], li_all_zones_bdry[ii]))\r\n    space_level_list = li_all_zones_scaled\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = [\r\n    storey_level_list,\r\n    zone_level_list,\r\n    space_level_list\r\n    ]\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "3b3efc4777dc44ee820d335e09c5bce7",
      "Inputs": [
        {
          "Id": "e010c99aa7574122b3c10a4a25baef30",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "347faf7119104bd5822913c23501cbdc",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "82a989ad9ea14974bf92ecf99a8ab857",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nfrom gzip import READ\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\n\"\"\"\r\nCalculate the minimum and maximum boundaries in X and Y directions\r\n\"\"\"\r\n\r\n\r\ndef bdry_global2zone(gg, b_min, b_max):\r\n    return gg*b_min, gg*b_max\r\n\r\n\r\n\r\n\"\"\"\r\nrandomly vary the values\r\n\"\"\"\r\n\r\n\r\ndef random_variation(li, step):\r\n    len_li = len(li)\r\n    index_list = list(range(0, len_li))\r\n    index_target = int(random.choice(index_list))\r\n    vary_k = random.randint(0, 1)\r\n    li[index_target] = li[index_target] + \\\r\n        step if vary_k else li[index_target]-step\r\n\r\n    return li\r\n\r\n\r\n\"\"\"\r\nAdjust the values to satisfy the constraints in X and Y directions\r\nTo satisfy\r\n(x_min < x3) and (x3 <= x1) and (x1 < x2) and (x2 < x_max)\r\nand\r\n(y_min < y3) and (y3 < y1) and (y1 == y2) and (y2 < y_max)\r\n\"\"\"\r\n\r\n\r\ndef constraintOfZoneFromStorey_X(x1, x2, x3, x_min, x_max):\r\n    if (x_min <= x3) and (x3 <= x1) and (x1 < x2) and (x2 <= x_max):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\ndef constraintOfZoneFromStorey_Y(y1, y2, y3, y_min, y_max):\r\n    if (y_min <= y3) and (y3 < y1) and (y2 == y1) and (y1 <= y_max):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\ndef adjustZoneFromStorey_X(x1, x2, x3, step, x_min, x_max):\r\n    # To satisfy: (x_min < x3) and (x3 <= x1) and (x1 < x2) and (x2 < x_max):\r\n\r\n    # sort from small to big x3 <= x1 < x2\r\n    def sortlist(li):\r\n        li.sort()\r\n        return li\r\n    [x3, x1, x2] = sortlist([x1, x2, x3])\r\n\r\n    if x1 == x2 and x2 == x3:\r\n        x_step = x1*x1/(x3+x2)\r\n        x3, x2 = x_min + step * x_step, x_max - step * x_step\r\n\r\n    # adjustment\r\n    def adjust_X(x1, x2, x3, step, x_min, x_max):\r\n        if x_min >= x3:\r\n            x3 += step\r\n        elif x_min < x3:\r\n            if x2 >= x_max:\r\n                x2 -= step\r\n            elif x2 < x_max:\r\n                if x3 > x1:\r\n                    value = x3\r\n                    x3 = x1\r\n                    x1 = value\r\n                elif x3 <= x1:\r\n                    if x1 > x2:\r\n                        value = x2\r\n                        x2 = x1\r\n                        x1 = value\r\n                    elif x1 == x2:\r\n                        x1 = (x3+x2)/2\r\n                    elif x1 < x2:\r\n                        None\r\n\r\n        [x3, x1, x2] = sortlist([x1, x2, x3])\r\n        return x3, x1, x2\r\n\r\n    # process adjustment\r\n    while (constraintOfZoneFromStorey_X(x1, x2, x3, x_min, x_max) != True):\r\n        x3, x1, x2 = adjust_X(x1, x2, x3, step, x_min, x_max)\r\n        print(\"x3 = {}, x1 = {}, x2 = {}\".format(x3, x1, x2))\r\n    print(\"\\n Final Values: x3 = {}, x1 = {}, x2 = {} \\n\".format(x3, x1, x2))\r\n    return round(x1, 1), round(x2, 1), round(x3, 1)\r\n\r\n\r\ndef adjustZoneFromStorey_Y(y1, y2, y3, step, y_min, y_max):\r\n    # To satisfy: (y_min < y3) and (y3 < y1) and (y1 == y2) and (y2 < y_max):\r\n\r\n    # sort from small to big y3 < y1 = y2\r\n    def sortlist(li):\r\n        li.sort()\r\n        return li\r\n    [y3, y1, y2] = sortlist([y1, y2, y3])\r\n\r\n    if y1 == y2 and y2 == y3:\r\n        y_step = y1*y1/(y3+y2)\r\n        y3, y2 = y_min + step * y_step, y_max - step * y_step\r\n\r\n    # adjustment\r\n    def adjust_Y(y1, y2, y3, step, y_min, y_max):\r\n        if y_min >= y3:\r\n            y3 += step\r\n        elif y_min < y3:\r\n            if y2 >= y_max:\r\n                y2 -= step\r\n            elif y2 < y_max:\r\n                if y1 != y2:\r\n                    y1, y2 = (y1+y2)/2, (y1+y2)/2\r\n                elif y1 == y2:\r\n                    if y3 >= y1:\r\n                        value = y3\r\n                        y3 = y1\r\n                        y1, y2 = value, value\r\n                    elif y3 < y1:\r\n                        None\r\n        [y3, y1, y2] = sortlist([y1, y2, y3])\r\n        return y3, y1, y2\r\n\r\n    # process adjustment\r\n    while (constraintOfZoneFromStorey_Y(y1, y2, y3, y_min, y_max) != True):\r\n        y3, y1, y2 = adjust_Y(y1, y2, y3, step, y_min, y_max)\r\n        print(\"y3 = {}, y1 = {}, y2 = {}\".format(y3, y1, y2))\r\n    print(\"\\n Final Values: y3 = {}, y1 = {}, y2 = {} \\n\".format(y3, y1, y2))\r\n    return round(y1, 1), round(y2, 1), round(y3, 1)\r\n\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\nstorey_level_list = IN[0]\r\nzone_level_list = IN[1]\r\nspace_level_list = IN[2]\r\ntol = IN[3]\r\nconstraintForZone = IN[4]\r\n\r\nbdry_min, bdry_max, step = tol\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log01.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\n# if the constraints are applied\r\nif constraintForZone:\r\n\r\n    x1, y1 = zone_level_list[0][0], zone_level_list[0][1]\r\n    x2, y2 = zone_level_list[1][0], zone_level_list[1][1]\r\n    x3, y3 = zone_level_list[2][0], zone_level_list[2][1]\r\n    x4, y4 = zone_level_list[3][0], zone_level_list[3][1]\r\n\r\n    x_min, x_max = bdry_global2zone(storey_level_list[0], bdry_min, bdry_max)\r\n    y_min, y_max = bdry_global2zone(storey_level_list[1], bdry_min, bdry_max)\r\n\r\n    # There is no zone 4 in this case study (to improve later)\r\n    if x4 != 0 or y4 != 0:\r\n        x4, y4 = 0, 0\r\n\r\n    # Check if the constraints in X and in Y are satisfied, if not adjust them\r\n    y1, y2, y3 = adjustZoneFromStorey_Y(y1, y2, y3, step, y_min, y_max)\r\n    x1, x2, x3 = adjustZoneFromStorey_X(x1, x2, x3, step, x_min, x_max)\r\n    zone_level_list = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = [\r\n    storey_level_list,\r\n    zone_level_list,\r\n    space_level_list\r\n    ]\r\n\r\n# OUT = [\r\n#     [gx, gy, gz, x1, y1, x2, y2, x3, y3, x4, y4],\r\n#     [x1, y1],\r\n#     [x2, y2],\r\n#     [x3, y3],\r\n#     [x4, y4],\r\n#     ]",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "4651ffc3e9e8427e89f72be223a99689",
      "Inputs": [
        {
          "Id": "9a203152f4114ff6b4ed3e2df3f42867",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "30b6f425ec5648c3b06a32022ca41ced",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cf7c3da23ae744b2b577412d1b1c9a5d",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4b9b3c53f5ca4486bb0017365a4724dd",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "93dcba6de9f64df4aca98f78419afa1b",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "58ee947fd55d41de908c3c8b672111e4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\"\"\"\r\nClear the model\r\n\"\"\"\r\n\r\n\r\ndef clear_model(bool_value):\r\n    doc.Regenerate()\r\n    if bool_value:\r\n        del_door = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Doors).WhereElementIsNotElementType().ToElements()\r\n        del_floor = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements()\r\n        del_wall = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements()\r\n        del_roof = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Roofs).WhereElementIsNotElementType().ToElements()\r\n        del_all = [del_door, del_floor, del_wall, del_roof]\r\n        for element_type in del_all:\r\n            for element in element_type:\r\n                doc.Delete(element.Id)\r\n\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef doorspace(region, defual_doorwidth = 1.0):\r\n    if abs(region[0]*region[2]) >= defual_doorwidth:\r\n        return region\r\n    else:\r\n        region[2] = 0\r\n        return region\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\nstorey_zone_space_levels_list = IN[0]\r\nstorey_level_list, zone_level_list, space_level_list = storey_zone_space_levels_list\r\n\r\nstorey_zone_levels_list = [storey_level_list, zone_level_list]\r\nstorey_zone_levels_list = [x for xs in storey_zone_levels_list for x in xs]\r\ngx, gy, gz, [x1, y1], [x2, y2], [x3, y3], [x4, y4] = storey_zone_levels_list\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log05.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\n# regions: global dimension, region reference, halfregions\r\nregions = [[gy, y1 / gy - 1, y1 / gy],\r\n           [gx, (x1 + x2) / gx - 1, 0.5 * (x2 - x1) / gx],\r\n           [gy, (y2 + y3) / gy - 1, 0.5 * (y1 - y3) / gy],\r\n           [gx, x3 / gx - 1, x3 / gx]]\r\n\r\ndefual_doorwidth = 1.0\r\n\r\nextdoors_slider_bdry = []\r\nfor region in regions:\r\n    region_temp = doorspace(region,defual_doorwidth)\r\n    if region_temp[2] != 0:\r\n        extdoors_slider_bdry.append(\r\n            [region_temp[1]- 0.50 * region_temp[2], region_temp[1] + 0.50 * region_temp[2]])\r\n    else:\r\n        extdoors_slider_bdry.append([])\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = extdoors_slider_bdry",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "6c2d6cb4b6ca455ead08cdf64dc2a7d1",
      "Inputs": [
        {
          "Id": "622244765fea47f8ad14d873a009ce68",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a0d1c28fef554d8eadd5092ae9bff8f5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\n\"\"\"\r\nconfigurate a list\r\n\"\"\"\r\n\r\n\r\ndef configurelist(li):\r\n    def sortlist(li):\r\n        li.sort()\r\n        return li\r\n\r\n    if len(li) == 1:\r\n        if li[0] == 0:\r\n            return []\r\n        else:\r\n            return li\r\n    elif len(li) > 1:\r\n        return sortlist(li)\r\n\r\n\r\n\"\"\"\r\nscale the list to a suitable range\r\n\"\"\"\r\n\r\n\r\ndef scalelist(li, bdry_value):\r\n    \r\n    # if there's no zone, return an empty list\r\n    if bdry_value == 0:\r\n        return []\r\n    \r\n    # decide whether we need to scale the list\r\n    scale = False\r\n    for item in li:\r\n        if item >= bdry_value:\r\n            scale = True\r\n            break\r\n    \r\n    # if it needs to be scaled\r\n    if scale:\r\n        scale_base = max(li) + min(li)\r\n        li = [round(item * bdry_value / scale_base, 1) for item in li]\r\n\r\n    return li\r\n\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\ngridsForZones = IN[0]\r\nstorey_zone_space_levels_list = IN[1]\r\n\r\nstorey_level_list, zone_level_list, space_level_list = storey_zone_space_levels_list\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log02.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\n# all coordinates for creating references\r\nall_cords = []\r\n\r\nfor zz in range(len(gridsForZones)):\r\n    cord = [gridsForZones[zz][0],gridsForZones[zz][1],zone_level_list[zz][0],zone_level_list[zz][1],space_level_list[zz]]\r\n    all_cords.append(cord)\r\n\r\n# all_cords[-1][-1] = 0\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = all_cords\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "3102de75af8f4b008666acf732e13b7d",
      "Inputs": [
        {
          "Id": "c311f0888c734699961873a949c41a3c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "41e304d81bef4a7b90e922c7088adf43",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6278b7be5dc0472c9fd9f6546b1236f3",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\nfrom Revit import GeometryConversion as gc\r\nfrom itertools import combinations\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\"\"\"\r\nClear the model\r\n\"\"\"\r\n\r\n\r\ndef clear_door_window(bool_value):\r\n    doc.Regenerate()\r\n    if bool_value:\r\n        del_door = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Doors).WhereElementIsNotElementType().ToElements()\r\n        del_window = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Windows).WhereElementIsNotElementType().ToElements()\r\n        for element_d in del_door:\r\n            doc.Delete(element_d.Id)\r\n        for element_w in del_window:\r\n            doc.Delete(element_w.Id)\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\n\"\"\"\r\nCustomizedWall -> CustomizedDoor\r\n\"\"\"\r\n\r\n\r\nclass CustomizedDoor:\r\n    def __init__(self, doc, doortype, masterwall, zonelevel, adj=0.0):\r\n        self.type = UnwrapElement(doortype)\r\n        self.wall = masterwall\r\n        self.level = UnwrapElement(zonelevel)\r\n        self.width = meter_to_foot(self.type.LookupParameter(\"Width\").AsDouble())\r\n\r\n        # adjust = 0 : in the middle of the wall; adjust = -1.0: at the start place of the wall; adjust = 1.0: at the end place of the wall (-----x/y+++++|)\r\n        ww_sta = masterwall.Location.Curve.GetEndPoint(0)\r\n        ww_end = masterwall.Location.Curve.GetEndPoint(1)\r\n        adj_x = abs(ww_sta.X - ww_end.X - self.width)/2\r\n        adj_y = abs(ww_sta.Y - ww_end.Y - self.width)/2\r\n        # adj_x = (adj_x - self.width) if adj_x>self.width else 0\r\n        # adj_y = (adj_y - self.width) if adj_y>self.width else 0\r\n\r\n        self.loc_x = (ww_sta.X + ww_end.X)/2 + adj*adj_x\r\n        self.loc_y = (ww_sta.Y + ww_end.Y)/2 + adj*adj_y\r\n        self.loc = Autodesk.Revit.DB.XYZ(\r\n            self.loc_x, self.loc_y, foot_to_meter(self.level.Elevation))\r\n        self.oo = doc.Create.NewFamilyInstance(\r\n            self.loc, self.type, masterwall, self.level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\r\n        # this doesnot work but why?\r\n        #ww_sta = masterwall.Location.Curve.ToProtoType().StartPoint\r\n        #ww_end = masterwall.Location.Curve.ToProtoType().EndPoint\r\n        # this doesnot work but why?\r\n\r\n\r\n\"\"\"\r\nCustomizedWall -> CustomizedWindow\r\n\"\"\"\r\n\r\n\r\nclass CustomizedWindow:\r\n    def __init__(self, doc, windowtype, masterwall, zonelevel, adj=0.0, height=2.5):\r\n        self.type = UnwrapElement(windowtype)\r\n        self.wall = masterwall\r\n        self.level = UnwrapElement(zonelevel)\r\n        self.width = meter_to_foot(self.type.LookupParameter(\"Rough Width\").AsDouble())\r\n        \r\n        ww_sta = masterwall.Location.Curve.GetEndPoint(0)\r\n        ww_end = masterwall.Location.Curve.GetEndPoint(1)\r\n        adj_x = abs(ww_sta.X - ww_end.X - self.width)/2 \r\n        adj_y = abs(ww_sta.Y - ww_end.Y - self.width)/2\r\n        # adj_x = (adj_x - self.width) if adj_x>self.width else 0\r\n        # adj_y = (adj_y - self.width) if adj_y>self.width else 0\r\n\r\n        self.loc_x = (ww_sta.X + ww_end.X)/2 + adj*adj_x\r\n        self.loc_y = (ww_sta.Y + ww_end.Y)/2 + adj*adj_y\r\n        self.loc = Autodesk.Revit.DB.XYZ(\r\n            self.loc_x, self.loc_y, foot_to_meter(self.level.Elevation)+foot_to_meter(height))\r\n        self.oo = doc.Create.NewFamilyInstance(\r\n            self.loc, self.type, masterwall, self.level, Autodesk.Revit.DB.Structure.StructuralType.NonStructural)\r\n\r\n\r\n\"\"\"\r\nFlip an object horizontally ...\r\n\"\"\"\r\ndef FlipObject(item):\r\n    if hasattr(item, \"Flip\"):\r\n        print \"yes\"\r\n        try:\r\n            item.Flip()\r\n            return True\r\n        except: return False\r\n    else:\r\n        print \"no\"\r\n        return False\r\n\r\n\r\n\"\"\"\r\nFlatten a list\r\n\"\"\"\r\n\r\n\r\ndef flatten(xss):\r\n    return [x for xs in xss for x in xs]\r\n\r\n\r\n\"\"\"\r\nFlap the openings in a wall\r\n\"\"\"\r\n\r\n\r\ndef flapOpeningsInWall(w_flipped):\r\n    openings_flipped = []\r\n    if hasattr(w_flipped,\"FindInserts\"):\r\n        openings_toflip = [w_flipped.Document.GetElement(x) for x in w_flipped.FindInserts(True,False,False,False)]\r\n        openings_flipped = [op.flipFacing() for op in openings_toflip]\r\n    return  openings_flipped\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\ndataflow = UnwrapElement(IN[0])\r\nOUT_createReferences,OUT_setMaterial,OUT_createGeo = dataflow\r\n\r\nglob_ref,glob_grids,rm_seps_cord_relative,rm_seps_cord,rm_zones_cord,rm_zones_grids,rm_zones_pts = OUT_createReferences\r\nfloor_type, roof_type, int_wall_type, ext_wall_type, window_type, int_door_type, ext_door_type = OUT_setMaterial\r\nwall_flippers,wall_exterior,wall_interior,wall_interior_rm_cr,wall_interior_rm_rm,building_floor,building_roof,room_zones = OUT_createGeo\r\nwall_exterior_flippers, wall_interior_flippers = wall_flippers\r\n\r\nwindows_indices = IN[1]\r\nwindow_height = IN[2]\r\nint_door_slider = IN[3]\r\nextdoors_slider_bdry = IN[4]\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log07.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nclear_door_window(True)\r\n\r\ncollector = FilteredElementCollector(doc)\r\nlevels = collector.OfClass(Level).ToElements()\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\nglob_centerpt  = Autodesk.Revit.DB.Point.Create(XYZ(foot_to_meter(glob_ref[0]/2), foot_to_meter(glob_ref[1]/2),foot_to_meter(levels[0].Elevation))).ToProtoType()\r\n\r\n# Create exterior doors\r\n# ********** to improve according to rooms' locations **********\r\nexterior_doors = []\r\nfor ii in range(len(wall_exterior)):\r\n    if (extdoors_slider_bdry[ii]):\r\n        # add a parameter here, considering the width of the door for chosed door type\r\n        out_door_slider = (extdoors_slider_bdry[ii][0] + extdoors_slider_bdry[ii][1])/2\r\n        exterior_doors.append(CustomizedDoor(doc,ext_door_type,wall_exterior[ii].ww,levels[0],out_door_slider))\r\n\r\n# Create interior doors\r\ninterior_doors = []\r\nval_tol = 0.001\r\n\r\nfor jj in range(len(room_zones)):\r\n    room_zone = room_zones[jj]\r\n    seps_list_ori = list(rm_seps_cord_relative[jj])\r\n    zone_doors = []\r\n\r\n    # doors in sep_wall\r\n    for sw in room_zone.sep_walls:\r\n        sep_walls_door = CustomizedDoor(doc,int_door_type,sw.ww,room_zone.level_b,0.0+int_door_slider)\r\n        zone_doors.append(sep_walls_door)\r\n\r\n    # doors in zone_wall\r\n    for ii in range(len(room_zone.all_walls_inzone)):\r\n        rw = room_zone.all_walls_inzone[ii]\r\n        ww_sta = rw.ww.Location.Curve.GetEndPoint(0)\r\n        ww_end = rw.ww.Location.Curve.GetEndPoint(1)\r\n        if abs(ww_sta.X - ww_end.X) < val_tol:\r\n            # skip the separation walls\r\n            continue\r\n        else:\r\n            # for each zone (corridor-room) wall\r\n            # add the starting coordination\r\n            seps_list_ori.append(0.0)\r\n\r\n            # add the finishing coordination\r\n            seps_list_ori.append(meter_to_foot(abs(ww_sta.X - ww_end.X)))\r\n            seps_list_ori.sort()\r\n\r\n            # initialize the separation index list \r\n            seps_list = []\r\n            for ss in range(len(seps_list_ori)-1):\r\n                seps_list.append((seps_list_ori[ss+1]+seps_list_ori[ss])/2+int_door_slider*(seps_list_ori[ss+1]-seps_list_ori[ss])/2)\r\n            for sep in seps_list:\r\n                sep_index = -1 + 2*sep/(meter_to_foot(abs(ww_sta.X - ww_end.X)))\r\n                zone_walls_door = CustomizedDoor(doc,int_door_type,rw.ww,room_zone.level_b,sep_index)\r\n                zone_doors.append(zone_walls_door)\r\n    interior_doors.append(zone_doors)\r\n\r\n# # Create exterior windows\r\nexterior_windows = []\r\n# for jj in range(len(wall_exterior)):\r\n#     ew = wall_exterior[jj].ww\r\n#     for window_index in windows_indices[jj]:\r\n#         exterior_window = CustomizedWindow(doc,window_type,ew,room_zone.level_b,window_index,window_height)\r\n#         exterior_windows.append(exterior_window)\r\n\r\n# Correct the orientations of exterior_doors&windows and interior doors&windows\r\nfor ii in range(len(wall_exterior_flippers)):\r\n    flipper = wall_exterior_flippers[ii]\r\n    if (flipper[1] == \"True\"):\r\n        flapOpeningsInWall(flipper[0])\r\n    else:\r\n        continue\r\n\r\nfor ii in range(len(wall_interior_flippers)):\r\n    flipper = wall_interior_flippers[ii]\r\n    if (flipper[1] == \"True\"):\r\n        flapOpeningsInWall(flipper[0])\r\n    else:\r\n        continue\r\n\r\ndoc.Regenerate()\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT_createOpenings = [exterior_doors, interior_doors, exterior_windows]\r\nOUT = [OUT_createReferences,OUT_setMaterial,OUT_createGeo,OUT_createOpenings]\r\n\r\n#   - - - - - - - - - - OUT - - - - - - - - - -\r\n\r\n#   OUT[0]\r\n#   OUT_createReferences\r\n#   glob_ref,glob_grids,rm_seps_cord_relative,rm_seps_cord,rm_zones_cord,rm_zones_grids,rm_zones_pts\r\n\r\n#   OUT[1]\r\n#   OUT_setMaterial\r\n#   floor_type, roof_type, int_wall_type, ext_wall_type, window_type, int_door_type, ext_door_type\r\n\r\n#   OUT[2]\r\n#   OUT_createGeo\r\n#   wall_flippers,wall_exterior,wall_interior,wall_interior_rm_cr,wall_interior_rm_rm,building_floor,building_roof,room_zones\r\n\r\n#   OUT[3]\r\n#   OUT_createOpenings \r\n#   exterior_doors, interior_doors, exterior_windows\r\n\r\n#   - - - - - - - - - - - - - - - - - - - - -\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "59737b542ebd405198c6430cbac6a11c",
      "Inputs": [
        {
          "Id": "ccd996ef3a2d4c5bab02ea4b770b018b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1026ff46dd4548ce9e626850dcc36c9d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e1a0327604d442cab955da4ee5ab73ab",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8cced67261dc4d129d4702432b015fe2",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "057963fa4a194cb89ac6a04d44282d59",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7dc8e0089ff04f008dd27c75fc144520",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\n\"\"\"\r\nfind the intersection point from two lines\r\n\"\"\"\r\n\r\n\r\ndef intersectionPointOfLines(line_1, line_2):\r\n    def det(a, b):\r\n        return a[0] * b[1] - a[1] * b[0]\r\n\r\n    line1 = [[line_1.StartPoint.X, line_1.StartPoint.Y], [\r\n        line_1.EndPoint.X, line_1.EndPoint.Y]]\r\n    line2 = [[line_2.StartPoint.X, line_2.StartPoint.Y], [\r\n        line_2.EndPoint.X, line_2.EndPoint.Y]]\r\n    xdiff = [line1[0][0] - line1[1][0], line2[0][0] - line2[1][0]]\r\n    ydiff = [line1[0][1] - line1[1][1], line2[0][1] - line2[1][1]]\r\n    div = det(xdiff, ydiff)\r\n\r\n    if (bool(line_1.Intersect(line_2))):\r\n        case = 0\r\n        pt_intersection = line_1.Intersect(line_2)[0]\r\n        if line_1.StartPoint.IsAlmostEqualTo(line_2.StartPoint) or line_1.StartPoint.IsAlmostEqualTo(line_2.EndPoint) or line_1.EndPoint.IsAlmostEqualTo(line_2.StartPoint) or line_1.EndPoint.IsAlmostEqualTo(line_2.EndPoint):\r\n            mutual_inter = False\r\n        else:\r\n            mutual_inter = True\r\n    else:\r\n        pt_intersection = None\r\n        mutual_inter = False\r\n        if abs(div) < 0.0001:\r\n            case = 1\r\n        else:\r\n            case = 2\r\n    return case,pt_intersection,mutual_inter\r\n\r\n\r\n\"\"\"\r\nCreat XYZ from a startpoint and a endpoint\r\n\"\"\"\r\n\r\n\r\ndef XYZfromPoints(startpoint,endpoint):\r\n    \r\n    delta_x = endpoint.X - startpoint.X \r\n    delta_y = endpoint.Y - startpoint.Y \r\n    delta_z = endpoint.Z - startpoint.Z \r\n    return XYZ(delta_x,delta_y,delta_z)\r\n\r\n\r\n\"\"\"\r\nfind the intersection point from two lines\r\n\"\"\"\r\n\r\n\r\ndef intersectionPointsOfWalls(wall_1, wall_2):\r\n    innerPoint,outerPoint = [], []\r\n    wallWidth_1, wallWidth_2 = wall_1.Width, wall_2.Width\r\n    wallline_1, wallline_2 = wall_1.Location.Curve.ToProtoType(True), wall_2.Location.Curve.ToProtoType(True)\r\n\r\n    wallline_1_pt1, wallline_1_pt2 = wallline_1.StartPoint, wallline_1.EndPoint\r\n    wallline_2_pt1, wallline_2_pt2 = wallline_2.StartPoint, wallline_2.EndPoint\r\n    res_walllines = intersectionPointOfLines(wallline_1,wallline_2)\r\n\r\n    if res_walllines[0] == 0 and res_walllines[2] == False:\r\n        wallline_1_vec = XYZfromPoints(wallline_1_pt1, wallline_1_pt2) if wallline_1_pt1.IsAlmostEqualTo(res_walllines[1]) else XYZfromPoints(wallline_1_pt2,wallline_1_pt1)\r\n        wallline_2_vec = XYZfromPoints(wallline_2_pt1, wallline_2_pt2) if wallline_2_pt1.IsAlmostEqualTo(res_walllines[1]) else XYZfromPoints(wallline_2_pt2,wallline_2_pt1)\r\n        wallline_1_vec_unit, wallline_2_vec_unit = wallline_1_vec.Divide(wallline_1_vec.GetLength()), wallline_2_vec.Divide(wallline_2_vec.GetLength())\r\n        innerPoint = res_walllines[1].ToRevitType() + wallline_1_vec_unit*wallWidth_1/2 + wallline_2_vec_unit*wallWidth_2/2\r\n        outerPoint = res_walllines[1].ToRevitType() - wallline_1_vec_unit*wallWidth_1/2 - wallline_2_vec_unit*wallWidth_2/2\r\n    # TOO ADD\r\n    # if res_walllines[0] == 0 and res_walllines[2] == True:\r\n    # wall intersect and non continuously connected\r\n    return innerPoint.ToPoint(),outerPoint.ToPoint()\r\n\r\n\r\n\"\"\"\r\nGet an element by value \r\n\"\"\"\r\n\r\n\r\ndef getElementByValue(doc,v):\r\n    # if value is ElementId or Reference object\r\n    if isinstance(v, (ElementId, Reference)):\r\n        return doc.GetElement(v)\r\n    # if value is a integer\r\n    elif isinstance(v, (int, Int16, Int32, Int64)):\r\n        return doc.GetElement(ElementId(v))\r\n    # if value is a String 'integer'\r\n    elif isinstance(v, (str, String)) and str(v).isdigit():\r\n        return doc.GetElement(ElementId(int(v)))\r\n    # if value is a String Unique Id\r\n    elif isinstance(v, (str, String)) and '-' in str(v):\r\n        return doc.GetElement(v)\r\n\r\n\r\n\"\"\"\r\nGet the phase of selected elements\r\n*  *  *  needs to improve  *  *  * \r\n\"\"\"\r\n\r\n\r\ndef getPhases(item):\r\n    if hasattr(item, \"CreatedPhaseId\"):\r\n        print \"01\"\r\n        #return item.Document.GetElement(item.CreatedPhaseId), item.Document.GetElement(item.DemolishedPhaseId)\r\n        return item.Document.GetElement(item.CreatedPhaseId)\r\n    else:\r\n        print \"00\"\r\n        return None\r\n\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\ndataflow = UnwrapElement(IN[0])\r\nOUT_createReferences,OUT_setMaterial,OUT_createGeo,OUT_createOpenings = dataflow\r\n\r\nglob_ref,glob_grids,rm_seps_cord_relative,rm_seps_cord,rm_zones_cord,rm_zones_grids,rm_zones_pts = OUT_createReferences\r\nfloor_type, roof_type, int_wall_type, ext_wall_type, window_type, int_door_type, ext_door_type = OUT_setMaterial\r\nwall_exterior_flippers,wall_exterior,wall_interior,wall_interior_rm_cr,wall_interior_rm_rm,building_floor,building_roof,room_zones = OUT_createGeo\r\nexterior_doors, interior_doors, exterior_windows = OUT_createOpenings\r\n\r\nglob_dim_x, glob_dim_y = glob_ref[0], glob_ref[1]\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log08.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nOUT = []\r\n\r\ncollector = FilteredElementCollector(doc)\r\nlevels = collector.OfClass(Level).ToElements()\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\nw_ext = []\r\nw_zne = []\r\n\r\nfor w in wall_exterior:\r\n    w_ext.append(w.ww)\r\n\r\nfor room_zone in room_zones:\r\n    w_zne_0 = []\r\n    for w in room_zone.zone_walls:\r\n        w_zne_0.append(w.ww)\r\n    w_zne.append(w_zne_0)\r\n\r\n# Select all the exterior walls (that are not connected yet) to be intersected for each zone\r\nw_ext_tempo_all = []\r\n\r\n# Select all the zone walls (that are not connected yet) to be intersected for each zone\r\nw_zne_tempo_all = []\r\n\r\n# Select the zone point to start with\r\nw_zne_pt_all = []\r\n\r\n# Selection process\r\nfor jj in range(len(room_zones)):\r\n    w_ext_tempo = [x for x in w_ext]\r\n    #print \"\\n start a new zone\", len(w_ext_tempo)\r\n    w_zne_tempo = [x for sublist in w_zne for x in sublist]\r\n    #print \"\\n start a new zone\", len(w_zne_tempo)\r\n    w_z = w_zne[jj]\r\n    #Select the intersection points of the walls\r\n    res_zz = intersectionPointsOfWalls(w_z[0],w_z[1])\r\n    #Select the intersection points of the walls - the outer point\r\n    w_zne_pt_all.append(res_zz[1])\r\n\r\n    for we in w_ext:\r\n        res_z_e_0 = intersectionPointOfLines(w_z[0].Location.Curve.ToProtoType(True), we.Location.Curve.ToProtoType(True))\r\n        res_z_e_1 = intersectionPointOfLines(w_z[1].Location.Curve.ToProtoType(True), we.Location.Curve.ToProtoType(True))\r\n        if res_z_e_0[0] == 0 or res_z_e_1[0] == 0:\r\n            #print \"\\n in this zone\", \"interaction yes\"\r\n            w_ext_tempo.remove(we)\r\n        else:\r\n            #print \"\\n in this zone\", \"interaction no\"\r\n            continue\r\n    w_ext_tempo_all.append(w_ext_tempo)\r\n\r\n    w_zne_tempo.remove(w_z[0])\r\n    w_zne_tempo.remove(w_z[1])\r\n    w_zne_tempo_all.append(w_zne_tempo)\r\n\r\n# Intersection Process\r\npts_ll_int_all=[]\r\nfor jj in range(len(room_zones)):\r\n    pt = w_zne_pt_all[jj]\r\n    w_to_intersect = w_ext_tempo_all[jj]+w_zne_tempo_all[jj]\r\n    pt_l_x = Autodesk.Revit.DB.Line.CreateBound(Autodesk.Revit.DB.XYZ(\r\n        foot_to_meter(0), foot_to_meter(pt.Y), foot_to_meter(pt.Z)), Autodesk.Revit.DB.XYZ(\r\n        foot_to_meter(glob_dim_x), foot_to_meter(pt.Y), foot_to_meter(pt.Z))).ToProtoType(True)\r\n    pt_l_y = Autodesk.Revit.DB.Line.CreateBound(Autodesk.Revit.DB.XYZ(\r\n        foot_to_meter(pt.X), foot_to_meter(0), foot_to_meter(pt.Z)), Autodesk.Revit.DB.XYZ(\r\n        foot_to_meter(pt.X), foot_to_meter(glob_dim_y), foot_to_meter(pt.Z))).ToProtoType(True)\r\n    pt_ll = [pt_l_x, pt_l_y]\r\n\r\n    pts_ll_int = []\r\n    \r\n    # for each intersecting line (the 1st in the X, and the 2nd in the Y direction)\r\n    for pt_l in pt_ll:\r\n        pts_l_int = []\r\n        for w in w_to_intersect:\r\n            ## Raw Option: find the intersection point at the middle line of wall\r\n            #res_intersect = intersectionPointOfLines(\r\n            #    pt_l, w.Location.Curve.ToProtoType(True))\r\n            \r\n            res_intersect = intersectionPointOfLines(\r\n                pt_l, w.Location.Curve.ToProtoType(True))\r\n            if (res_intersect[1] != None) and (res_intersect[2] == True):\r\n                if pts_l_int == [] or (pt.DistanceTo(res_intersect[1]) <= pt.DistanceTo(pts_l_int)):\r\n                    line_vec = XYZfromPoints(res_intersect[1], pt)\r\n                    line_vec_unit = line_vec.Divide(line_vec.GetLength())\r\n                    # New Option: find the intersection point at the closer-side line of wall\r\n                    pts_l_int = res_intersect[1].ToRevitType() + line_vec_unit*w.Width/2\r\n                    pts_l_int = pts_l_int.ToPoint()\r\n                else:\r\n                    continue\r\n            else:\r\n                continue\r\n        pts_ll_int.append(pts_l_int)\r\n    pts_ll_int = [pts_ll_int[0] if pt.DistanceTo(pts_ll_int[0]) <= pt.DistanceTo(pts_ll_int[1]) else pts_ll_int[1]] \r\n    pts_ll_int_all.append(pts_ll_int[0])\r\n\r\n# Create separation lines for NewRoomBoundaries\r\nsep_bounds = []\r\nfor (w_zne_pt, pt_int) in zip(w_zne_pt_all,pts_ll_int_all):\r\n    w_zne_pt_xyz = UnwrapElement(w_zne_pt).ToRevitType()\r\n    pt_int_xyz = UnwrapElement(pt_int).ToRevitType()\r\n    sep_l = Autodesk.Revit.DB.Line.CreateBound(w_zne_pt_xyz,pt_int_xyz)\r\n    sep_bounds.append(sep_l.ToProtoType())\r\n\r\n# Extract Floor level \r\nelem_floor = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements()\r\nfloor_level = getElementByValue(doc,elem_floor[0].LevelId)\r\n\r\n# Build sketchplane of the floor level\r\nplane_vector = Vector.ByCoordinates(0.0,0.0,1.0)\r\nfacePlane = Plane.CreateByNormalAndOrigin(plane_vector.ToRevitType(),XYZ(0,0,floor_level.Elevation))\r\nsketchPlane = SketchPlane.Create(doc, facePlane)\r\n\r\n# Collect floorplan views\r\nviewTypes = FilteredElementCollector(doc).OfClass(ViewFamilyType)\r\nfor i in viewTypes:\r\n    if i.ViewFamily == ViewFamily.FloorPlan:\r\n        viewTypeId = i.Id\r\n        break\r\n    else:\r\n        continue\r\n\r\nexistingPlans = FilteredElementCollector(doc).OfClass(View).ToElements()\r\nexistingPlanNames, existingPlanElements = [], []\r\ntargetPlanView = []\r\nfor i in existingPlans:\r\n    if not i.IsTemplate:\r\n        if i.ViewType == ViewType.FloorPlan:\r\n            existingPlanNames.append(i.ToDSType(True).Name)\r\n            existingPlanElements.append(i)\r\n            if i.ToDSType(True).Name == \"Level0\":\r\n                targetPlanView = i\r\n            else:\r\n                continue \r\ndoc.Regenerate()\r\n\r\n# Delete previous created RoomBoundaryLines\r\ndel_sep_bounds = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_RoomSeparationLines).WhereElementIsNotElementType().ToElements()\r\nfor bound in del_sep_bounds:\r\n    doc.Delete(bound.Id)\r\n\r\n# Collect separation lines as \"curvearray\"\r\n#*  *  *  needs to improve  *  *  * \r\n#*  *  delete duplicated ones  *  * \r\ncurvearray = CurveArray()\r\nsep_bounds_lines = [sep_bound.ToRevitType() for sep_bound in sep_bounds]\r\nfor line in sep_bounds_lines:\r\n    curvearray.Append(line)\r\n\r\n# Create Separators for rooms (spaces)\r\ndoc.Create.NewRoomBoundaryLines(sketchPlane, curvearray, targetPlanView)\r\ndoc.Regenerate()\r\nsep_elements = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_RoomSeparationLines).WhereElementIsNotElementType().ToElements()\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT_createSeparators = [sep_bounds,sketchPlane,targetPlanView,sep_elements]\r\nOUT = [OUT_createReferences,OUT_setMaterial,OUT_createGeo,OUT_createOpenings,OUT_createSeparators]\r\n\r\n#   - - - - - - - - - - OUT - - - - - - - - - -\r\n\r\n#   OUT[0]\r\n#   OUT_createReferences\r\n#   glob_ref,glob_grids,rm_seps_cord_relative,rm_seps_cord,rm_zones_cord,rm_zones_grids,rm_zones_pts\r\n\r\n#   OUT[1]\r\n#   OUT_setMaterial\r\n#   floor_type, roof_type, int_wall_type, ext_wall_type, window_type, int_door_type, ext_door_type\r\n\r\n#   OUT[2]\r\n#   OUT_createGeo\r\n#   wall_flippers,wall_exterior,wall_interior,wall_interior_rm_cr,wall_interior_rm_rm,building_floor,building_roof,room_zones\r\n\r\n#   OUT[3]\r\n#   OUT_createOpenings \r\n#   exterior_doors, interior_doors, exterior_windows\r\n\r\n#   OUT[4]\r\n#   OUT_createSeparators \r\n#   sep_bounds,sketchPlane,targetPlanView,sep_elements\r\n\r\n#   - - - - - - - - - - - - - - - - - - - - -\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "09312c017a064202b4d7abf2c61d41c5",
      "Inputs": [
        {
          "Id": "12e79d73fa284b468ec34a97157738a6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "38ce6b13305442d2bf9f23d1d20f7a06",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.RevitPhases, DSRevitNodesUI",
      "SelectedIndex": 1,
      "SelectedString": "New Construction",
      "NodeType": "ExtensionNode",
      "Id": "b3b25864266d4c7cac2dbedb9aa61a99",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "dc39e5b8461d4beda94e1416f30b0bf5",
          "Name": "Phase",
          "Description": "The selected Phase",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select an existing Revit Phase from the active document."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "sem;\ngeo;\ninput = [sem, geo];",
      "Id": "13fc9e9896b64989823ace0ffe105a4f",
      "Inputs": [
        {
          "Id": "8baee9b255cf4dd3841f7aa1c76fae7f",
          "Name": "sem",
          "Description": "sem",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9765cbf85fa3491191b2a25aa46f5088",
          "Name": "geo",
          "Description": "geo",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aee2cd2439c949829a9aa332c8baaa5e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "50c3427173074000a37bc7b0ed98de5b",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fe510c34ea3c4703bac8b600bdc25b1b",
          "Name": "",
          "Description": "input",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\ndef get_directory_modelsaving(nr_model):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    folderpath += (\"test_\"+str(nr_model))\r\n    return folderpath\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\n\r\n# Get the Input\r\nproceed_trigger = IN[0]\r\nnr_model = int(IN[1])\r\n\r\n# Save the model\r\nOUT = get_directory_modelsaving(nr_model)\r\n\r\n# TransactionManager.Instance.EnsureInTransaction(doc)\r\n# TransactionManager.Instance.TransactionTaskDone()",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "4062275cb7ce4dd2abd09c6a0a792451",
      "Inputs": [
        {
          "Id": "5383e81e63dd4e8498f98e8a3baa1da6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "449f8ba88d07414793732eeb9501fbaf",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ae64e709a69a49cf8a3c4781f3ab9283",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "4eb5579e-5a50-470f-b454-934df2193507",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "fe0a078f299b4798b5c0f36444ee5fd9",
      "Inputs": [
        {
          "Id": "0a8c2991c1b742b0816d3e55799cab4f",
          "Name": "imagePath",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "94c55eecbf3840b7b2377a5d761823aa",
          "Name": "",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": ""
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\n#import pandas as pd\r\n#import numpy as np\r\n#import matplotlib.pyplot as plt\r\n#import matplotlib as mpl\r\n#from matplotlib import cm\r\n#from matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\n#mpl.rcParams['text.usetex'] = True\r\n#from mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\n#from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\n#import scipy.stats as ss\r\n#from scipy.stats import norm\r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\"\"\"\r\nClear the model\r\n\"\"\"\r\n\r\n\r\ndef clear_model(bool_value):\r\n    doc.Regenerate()\r\n    if bool_value:\r\n        del_door = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Doors).WhereElementIsNotElementType().ToElements()\r\n        del_floor = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements()\r\n        del_wall = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements()\r\n        del_roof = FilteredElementCollector(doc).OfCategory(\r\n            BuiltInCategory.OST_Roofs).WhereElementIsNotElementType().ToElements()\r\n        del_all = [del_door, del_floor, del_wall, del_roof]\r\n        for element_type in del_all:\r\n            for element in element_type:\r\n                doc.Delete(element.Id)\r\n\r\n\r\n\"\"\"\r\nUnits displayed/assigned in Dynamo are feet. 1meter = 3.28084 foot\r\nmeter_to_foot: Converts a value from Revit's internal units to a given display unit.\r\nfoot_to_meter: Converts a value from a given display unit to Revit's internal units.\r\n\"\"\"\r\n\r\n\r\ndef meter_to_foot(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertFromInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef foot_to_meter(ori_value):\r\n    if isinstance(ori_value, list):\r\n        return [UnitUtils.ConvertToInternalUnits(value, UnitTypeId.Meters) for value in ori_value]\r\n    return float(UnitUtils.ConvertToInternalUnits(ori_value, UnitTypeId.Meters))\r\n\r\n\r\ndef ProcessList(_func, _list):\r\n   return map( lambda x: ProcessList(_func, x) if type(x)==list else _func(x), _list )\r\n\r\n\r\n\"\"\"\r\nFlatten a list\r\n\"\"\"\r\n\r\n\r\ndef flatten(xss):\r\n    return [x for xs in xss for x in xs]\r\n\r\n\r\n\"\"\"\r\nDetermine whether a line situates in a Revit built room\r\n\"\"\"\r\n\r\n\r\ndef ifPointIncludedInZone(point,zone):\r\n    zone_customizedwalls = zone.all_walls_inzone\r\n    zone_walls = [item.ww for item in zone_customizedwalls]\r\n    zone_walls_lines = [item.Location.Curve.ToProtoType(True) for item in zone_walls]\r\n    pt_x, pt_y = [], []\r\n    for ll in zone_walls_lines:\r\n        pt_x.append(ll.StartPoint.X)\r\n        pt_x.append(ll.EndPoint.X)\r\n        pt_y.append(ll.StartPoint.Y)\r\n        pt_y.append(ll.EndPoint.Y)\r\n    pt_x_zone, pt_y_zone = (min(pt_x),max(pt_x)), (min(pt_y),max(pt_y))\r\n    if pt_x_zone[0] <= meter_to_foot(point.X) <= pt_x_zone[1] and pt_y_zone[0] <= meter_to_foot(point.Y) <= pt_y_zone[1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\ndataflow = UnwrapElement(IN[0])\r\nOUT_createReferences,OUT_setMaterial,OUT_createGeo,OUT_createOpenings,OUT_createSeparators= dataflow\r\n\r\nglob_ref,glob_grids,rm_seps_cord_relative,rm_seps_cord,rm_zones_cord,rm_zones_grids,rm_zones_pts = OUT_createReferences\r\nfloor_type, roof_type, int_wall_type, ext_wall_type, window_type, int_door_type, ext_door_type = OUT_setMaterial\r\nwall_exterior_flippers,wall_exterior,wall_interior,wall_interior_rm_cr,wall_interior_rm_rm,building_floor,building_roof,room_zones = OUT_createGeo\r\nexterior_doors, interior_doors, exterior_windows = OUT_createOpenings\r\nsep_bounds,sketchPlane,targetPlanView,sep_elements = OUT_createSeparators\r\n\r\nphase = UnwrapElement(IN[1])\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log09.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\ncollector = FilteredElementCollector(doc)\r\nlevels = collector.OfClass(Level).ToElements()\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\nroom_as_spaces = []\r\n\r\n# To improve the initialization of room creation\r\nfor j,level in enumerate(levels):\r\n    try:\r\n        planTopology = doc.get_PlanTopology(level)\r\n        rooms = []\r\n        \r\n        for i,plancircuit in enumerate(planTopology.Circuits):\r\n            if plancircuit.IsRoomLocated == True:\r\n                continue\r\n            TransactionManager.Instance.EnsureInTransaction(doc)\r\n            room = doc.Create.NewRoom(phase)\r\n            room.Name = \"Name\" + str(i)\r\n            room.Number = str(j) + \".\" + str(i+1)\r\n            room.LimitOffset = levels[1].Elevation-levels[0].Elevation\r\n\r\n            try:\r\n                room2 = doc.Create.NewRoom(room,plancircuit)\r\n            except:\r\n                continue\r\n\r\n            TransactionManager.Instance.TransactionTaskDone()\r\n            rooms.append(room2)\r\n        room_as_spaces.append(rooms)\r\n    except:\r\n        continue\r\nroom_as_spaces = flatten(room_as_spaces)\r\n\r\n# Classify the spaces\r\nnb_room, nb_corridor = 1,1\r\nspace_of_rooms, space_of_corridors = [],[]\r\n\r\nfor jj in range(len(room_as_spaces)):\r\n    print \"jj=\", jj\r\n    criteria = False\r\n    for zz in range(len(room_zones)):\r\n        if ifPointIncludedInZone(room_as_spaces[jj].Location.Point,room_zones[zz]):\r\n            criteria = True\r\n            break\r\n        else:\r\n            continue\r\n    if criteria:\r\n    #    print \"room +1\"\r\n        room_as_spaces[jj].Name = \"Room\" + str(nb_room) \r\n        nb_room+=1\r\n        space_of_rooms.append(room_as_spaces[jj])\r\n    else:\r\n    #    print \"corridor +1\"\r\n        room_as_spaces[jj].Name = \"Corridor\" + str(nb_corridor)\r\n        nb_corridor+=1\r\n        space_of_corridors.append(room_as_spaces[jj])\r\ndoc.Regenerate()\r\n\r\n# Visualized the bounding boxed of two types of spaces\r\nbbx_space_of_rooms, bbx_space_of_corridors = [],[]\r\nbbx_space_of_rooms = [sp.ClosedShell.GetBoundingBox().ToProtoType() for sp in space_of_rooms]\r\nbbx_space_of_corridors = [sp.ClosedShell.GetBoundingBox().ToProtoType() for sp in space_of_corridors]\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT_placeSpaces = [space_of_rooms, space_of_corridors, bbx_space_of_rooms, bbx_space_of_corridors]\r\nOUT = [OUT_createReferences,OUT_setMaterial,OUT_createGeo,OUT_createOpenings,OUT_createSeparators,OUT_placeSpaces]\r\n\r\n#   - - - - - - - - - - OUT - - - - - - - - - -\r\n\r\n#   OUT[0]\r\n#   OUT_createReferences\r\n#   glob_ref,glob_grids,rm_seps_cord_relative,rm_seps_cord,rm_zones_cord,rm_zones_grids,rm_zones_pts\r\n\r\n#   OUT[1]\r\n#   OUT_setMaterial\r\n#   floor_type, roof_type, int_wall_type, ext_wall_type, window_type, int_door_type, ext_door_type\r\n\r\n#   OUT[2]\r\n#   OUT_createGeo\r\n#   wall_flippers,wall_exterior,wall_interior,wall_interior_rm_cr,wall_interior_rm_rm,building_floor,building_roof,room_zones\r\n\r\n#   OUT[3]\r\n#   OUT_createOpenings \r\n#   exterior_doors, interior_doors, exterior_windows\r\n\r\n#   OUT[4]\r\n#   OUT_createSeparators \r\n#   sep_bounds,sketchPlane,targetPlanView,sep_elements\r\n\r\n#   OUT[5]\r\n#   OUT_placeSpaces \r\n#   space_of_rooms, space_of_corridors, bbx_space_of_rooms, bbx_space_of_corridors\r\n\r\n#   - - - - - - - - - - - - - - - - - - - - -\r\n\r\n# ========================================================================================\r\n# # Prob1 # #\r\n# https://forum.dynamobim.com/t/how-to-get-the-elements-inside-a-boundingbox/5863/12\r\n# ========================================================================================\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "366aab9c8864405ba85aed278ec52f67",
      "Inputs": [
        {
          "Id": "38a7de9dd8fa4e6b9bdd18d7f8056235",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7fdeee0aa63f451aa622311cd3dadb6c",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "863fbd3b77824199a9161ca200683df7",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "19ce6b9f-f4cf-4a3f-9788-1482e94528d6",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "aa7d7d28cc1149ebbb9fe3a111a990cf",
      "Inputs": [
        {
          "Id": "ddb9322ee2f1466b81f5e8240b0c08e2",
          "Name": "filePath",
          "Description": " File path to save to. File extension (*.rvt/*.rfa) will be automatically added.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f121abfc9b4e4252917ca9f076c46421",
          "Name": "compactFile",
          "Description": " Should the file be compacted?\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b74d1a8f64e2441f8d706eb5c20e2945",
          "Name": "saveAsCentral",
          "Description": " Should the file be saved as a new central file? Will be ignored for non-workshared projects and families\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "53280461283b449b86f7598a2e52ff4e",
          "Name": "success",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Saves the active Revit document under the given name."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "out;\nOUT_createReferences=out[0];\nOUT_setMaterial=out[1];\nOUT_createGeo=out[2];\nOUT_createOpenings=out[3];\nOUT_createSeparators=out[4];\nOUT_placeSpaces=out[5];\nproceed_trigger = \"\";",
      "Id": "397f037952c041188eab3c2a27ec0e1e",
      "Inputs": [
        {
          "Id": "31d0d8d74e4f4a7c9993c112320a1b73",
          "Name": "out",
          "Description": "out",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "47b20c7ce6274c968bc341288d8a34da",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0dadec79b7034aa7a2b07bbf76e4977b",
          "Name": "",
          "Description": "OUT_createReferences",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0f5c378a99bd4e3090cb5983f82f61b3",
          "Name": "",
          "Description": "OUT_setMaterial",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e5033145f4c84328b6876298f078abd3",
          "Name": "",
          "Description": "OUT_createGeo",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c3a59940dbc94b3c82fb2f2c032c84cf",
          "Name": "",
          "Description": "OUT_createOpenings",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e9bf463a13484d0cb7abb4049053f7a5",
          "Name": "",
          "Description": "OUT_createSeparators",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ed23b9045d2b4c06a8f54d1789f4de7e",
          "Name": "",
          "Description": "OUT_placeSpaces",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "de806dd7c587495c9f245ff94d9d56c2",
          "Name": "",
          "Description": "proceed_trigger",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\n# general libraries\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\n# identify the pathway\r\nimport io\r\nimport os\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\nsys.path.append(os.path.join(localapp, r'python-3.8.3-embed-amd64\\Lib\\site-packages'))\r\n\r\n# plotting\r\nimport pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib as mpl\r\nfrom matplotlib import cm\r\nfrom matplotlib.ticker import MultipleLocator, FormatStrFormatter, MaxNLocator\r\nmpl.rcParams['text.usetex'] = True\r\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes, zoomed_inset_axes\r\nfrom mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar\r\nimport scipy.stats as ss\r\nfrom scipy.stats import norm\r\nimport ast \r\n\r\n# dynamo/revit-related libraries\r\nclr.AddReference('DynamoRevitDS')\r\nimport Dynamo \r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript import *\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n\r\n###############################################################\r\n# Customize functions\r\n###############################################################\r\n\r\n\r\n\"\"\"\r\nExtract the directory of the dyn.\r\n\"\"\"\r\n\r\n\r\ndef getFileDirectory(filename=\" \"):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    if filename != \" \":\r\n        folderpath += (filename)\r\n    return folderpath\r\n\r\n\r\n\"\"\"\r\nExtract the directory for input extraction\r\n\"\"\"\r\n\r\n\r\ndef get_directory_extractinput(nr_model):\r\n    dynscriptpath = Dynamo.Applications.DynamoRevit(\r\n    ).RevitDynamoModel.CurrentWorkspace.FileName\r\n    pathelement = dynscriptpath.split(\"\\\\\")[:-1]\r\n    folderpath = \"\"\r\n    for i in pathelement:\r\n        folderpath += (i + \"\\\\\")\r\n    folderpath += ('res\\\\inputdata_'+str(nr_model))\r\n    return folderpath\r\n\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\nnr_model = int(IN[0])\r\ninputparameters = UnwrapElement(IN[1])\r\n\r\n[sema_inputparameters, geo_inputparameters] = inputparameters\r\nstorey_level_list, zone_level_list, space_level_list = geo_inputparameters\r\n\r\n###############################################################\r\n# Record file into a .txt\r\n###############################################################\r\n# Get the current file path\r\nsaveDir = getFileDirectory()\r\n\r\nstdout_original = sys.stdout\r\nstdout_file = open(saveDir+\"log\\log10.txt\", 'w')\r\nsys.stdout = stdout_file\r\n\r\nsaveDir_extractinput = get_directory_extractinput(nr_model)\r\n\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW YOU CAN CODE -----------------------\r\n#--------------------------------------------------------------\r\n\r\n# Convert the inputparameters to to pandas dataframe\r\n# (till now we only consider the geometric part)\r\ndef is_list_empty(list):\r\n    return not bool(list)\r\n\r\nsummary_geom_Input = []\r\n\r\nfor item in storey_level_list:\r\n    summary_geom_Input.append(item)\r\n\r\nfor item in zone_level_list:\r\n    for sub_item in item:\r\n        summary_geom_Input.append(sub_item)\r\n\r\nfor item in space_level_list:\r\n    if is_list_empty(item):\r\n        summary_geom_Input.append(0)\r\n    else:    \r\n        for sub_item in item:\r\n            summary_geom_Input.append(sub_item) \r\n\r\ninput_column_headings = [\r\n    'dimension_x',\r\n    'dimension_y',\r\n    'dimension_z',\r\n    'room_zone1_x',\r\n    'room_zone1_y',\r\n    'room_zone2_x',\r\n    'room_zone2_y',\r\n    'room_zone3_x',\r\n    'room_zone3_y',\r\n    'room_zone4_x',\r\n    'room_zone4_y',\r\n    'room_zone1_sep_x1',\r\n    'room_zone2_sep_x1',\r\n    'room_zone2_sep_x2',\r\n    'room_zone2_sep_x3',\r\n    'room_zone3_sep_x1',\r\n    'room_zone3_sep_x2',\r\n    'room_zone3_sep_x3',\r\n    'room_zone3_sep_x4',\r\n    'room_zone4_sep_x1']\r\n\r\ngeom_Input = pd.DataFrame([summary_geom_Input], columns = input_column_headings)\r\ngeom_Input.to_hdf(saveDir_extractinput+'.h5', key = 'geom_Input', mode = 'w')\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n# Close and save the recording file\r\nsys.stdout = stdout_original\r\nstdout_file.close()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = str(saveDir_extractinput+'.h5')",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "af7a11a1216d4f33b8a9c4410f7cec0e",
      "Inputs": [
        {
          "Id": "c6e7ecd99e7342db8c504713eca68126",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cafa3260ccc4454d91248f6cee4a7305",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cf90af3e884547619db540525b9e2d00",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "outputInfo:String",
      "Id": "ee32d31493424e39a10b55027ea56359",
      "Inputs": [
        {
          "Id": "c13923a87de64a7ea5bd1a78ddb90ba4",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "successInfo: bool\r\n",
      "Id": "1873ef7659c34ae48ebbd0aa6bc5d925",
      "Inputs": [
        {
          "Id": "bdf4ea4fe2cc4ccab43182b8027f708f",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "inputInfo:String",
      "Id": "7120c7a4d86f4142be2f7a051459076d",
      "Inputs": [
        {
          "Id": "67b176edc14f4a47aca7e8021cdd1e00",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "65edb8e5-3afc-4a3d-aa04-74f7dd492024",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "a2e1c7dc60e04f9baa3def969cda0569",
      "Inputs": [
        {
          "Id": "64e0289bf5f24824a56727a8986e72c6",
          "Name": "generationSuccess",
          "Description": "bool",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7ad51209d0604bbd906beee76bcf51b3",
          "Name": "checkRules",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "78c2bd93a7444c0f9b40953922177e3a",
          "Name": "outputInfo",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": ""
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "4eb5579e-5a50-470f-b454-934df2193507",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "6629dde6336e4d9b8fc1fc139741775d",
      "Inputs": [
        {
          "Id": "8523cb95bea34a519c4ee5cd91be1bd3",
          "Name": "imagePath",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f6f0fd71bbd9410ebf556d6fcecd4c52",
          "Name": "",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": ""
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "path+\".png\";",
      "Id": "0313fd95b0a840fc95edb8cbd0f9d832",
      "Inputs": [
        {
          "Id": "bb571fb6f4c74ee5aea74ac25606cced",
          "Name": "path",
          "Description": "path",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ba6595fe6093423a8ba8bb612730e33e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "modelNumber",
        "TypeName": "int",
        "TypeRank": 0,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "57dabc392aef4bfb85efcdb1a5575426",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "53df03993fb4480d888cafcf366fd25e",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "filePath",
        "TypeName": "string",
        "TypeRank": 0,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "232caf7d065a418781bd0bcf98667ce6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "885acc835cbd4b7bbd35267477c88bfd",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "checkRules",
        "TypeName": "string",
        "TypeRank": 0,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "8deb945533d145c4a8e732e44050d19c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1f1ad3d646f14264bccc4a511348ee18",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    }
  ],
  "Connectors": [
    {
      "Start": "dc2b530dfb154275894f30f6a0922c90",
      "End": "972fa544522144f2a648cdcf4b81915c",
      "Id": "b5aa7f61ce244a98909956c4037d2e10"
    },
    {
      "Start": "0503a1df00ee4659bb715fa2522a7f59",
      "End": "33e67c20c35744e3a382953890266d7b",
      "Id": "69d5c42741c9460fb701672c69709a09"
    },
    {
      "Start": "9c18973def7f4159aabaaf9984363894",
      "End": "c92462973cec4ec3b816fa57a9c85380",
      "Id": "509ce434a87248f1a171976de6e59016"
    },
    {
      "Start": "3a250b0ce8a0479f91829801fbb05627",
      "End": "595790b68d1b424db65bc27b8b9b0ee0",
      "Id": "c05d2cb2173f43c7954b05466f98e3bc"
    },
    {
      "Start": "7386aaf5e2524591a5723a0e040dd163",
      "End": "9a203152f4114ff6b4ed3e2df3f42867",
      "Id": "dbffd2382f594d1d9e15cda1163cfd04"
    },
    {
      "Start": "3fdf2305648b4d6eba8f78a5dfcc32fc",
      "End": "30b6f425ec5648c3b06a32022ca41ced",
      "Id": "7acf2bb50a7a49bf92a340962d230d68"
    },
    {
      "Start": "479bcfea60854c60a693b8cc6676e698",
      "End": "cf7c3da23ae744b2b577412d1b1c9a5d",
      "Id": "9b6902b2b04e4335b6c75b20236226a0"
    },
    {
      "Start": "af9af13dbba04c89a6f7aafec2f30c85",
      "End": "dedec1f48b29480fb5d969f3d64e8e0b",
      "Id": "aaf2215f4c6243fcb4bc32d34666c78b"
    },
    {
      "Start": "55a18bf43dba48558bcf0f6d92d4cd0b",
      "End": "ab2dd0ccdb134d5bb3c06c3bf4529c3b",
      "Id": "287273df37f746b999fea065f805f20c"
    },
    {
      "Start": "28f405b195b7461b85d6955d3b5cd67b",
      "End": "93dcba6de9f64df4aca98f78419afa1b",
      "Id": "4ac5bce4ef834ca3bb2650cbc9c5e791"
    },
    {
      "Start": "3c078fb08f954d40a739251d327e8202",
      "End": "347faf7119104bd5822913c23501cbdc",
      "Id": "bd38b2c96e4f4fc09cb5b0c886430022"
    },
    {
      "Start": "6ea2a943a422446f974c8d3d639e5598",
      "End": "fea9e11b28a44b2ab1da58339a89b3ef",
      "Id": "4fd86e88cba94128b7f03263c873092b"
    },
    {
      "Start": "998991249a8b4e1cbb0cafabe97dde23",
      "End": "30b3d72ef85d41ffaa0aa8e60e3ebf1e",
      "Id": "948d8af90f2a431585596996ab44b3e5"
    },
    {
      "Start": "d78ba53778994e6b841bf1b7d1350961",
      "End": "bc595d364a134a29b4c11ed33d7dfe03",
      "Id": "9e08cfdca0e74c8f94504459f1fa530a"
    },
    {
      "Start": "eaa23da70db54c05849c4b9f17d8e815",
      "End": "7f774d647ead479d86b2422f2d0b53fe",
      "Id": "9a6fdcd547aa41a0a248fa4768f222be"
    },
    {
      "Start": "3d7ab45573be4c348c9d9afe528b8449",
      "End": "ee3395d0468742f0ad360b081354cb5c",
      "Id": "8aa3ea454b304c9984984a85acb5c706"
    },
    {
      "Start": "acf01179862945d8b72f9807e0f600f4",
      "End": "4dd7c4580b3b4dcc828e338eb8735a7d",
      "Id": "ef0a1484028d425784fc87621d64a66c"
    },
    {
      "Start": "4b43f315c4e848c69f37b27638435d97",
      "End": "c70f57b58bf64db8a881d0e28134400b",
      "Id": "c6f7115c904c4539829a629e087e15b4"
    },
    {
      "Start": "ad240a958a3843cd95b66b1649343561",
      "End": "4b9b3c53f5ca4486bb0017365a4724dd",
      "Id": "c08268ac20df4ed185c57b5620fb7bd6"
    },
    {
      "Start": "00fe445d65004ba79be8414a39af972d",
      "End": "c311f0888c734699961873a949c41a3c",
      "Id": "697fc32938c540b3af421650ac424a2c"
    },
    {
      "Start": "a362e342ed7540f1969c325fc6475312",
      "End": "22be390082e84222974b4e0cd3accdb9",
      "Id": "1a8c0e216b4c411a90c45dafafd12412"
    },
    {
      "Start": "76ae31f7e79d4e23a7f29d55a49fb565",
      "End": "ccd996ef3a2d4c5bab02ea4b770b018b",
      "Id": "8ee00c9ceefd4c6bb0e6faa0701bd719"
    },
    {
      "Start": "0fb6b3d4664e4492874e0cddf34e94a0",
      "End": "d2e85e33527d47339e8c93bb2010c74b",
      "Id": "ae6ca9ea61b146c6b30c1165f7595500"
    },
    {
      "Start": "0fb6b3d4664e4492874e0cddf34e94a0",
      "End": "8baee9b255cf4dd3841f7aa1c76fae7f",
      "Id": "e02ef89c3ca54869a554261a5a66d86a"
    },
    {
      "Start": "03136bf64a534e97b07f1b5283890365",
      "End": "a2b75d38e46b487c9ea0945160eb2316",
      "Id": "9cd8e96b06f245429d7d0806be8d0f54"
    },
    {
      "Start": "66646e0adfbf4af098d1465a777bbe8a",
      "End": "4eb30f18ffb445ea94dca7730567f115",
      "Id": "c41ac56c30db4410a3c30d1195ad823d"
    },
    {
      "Start": "085b7a4d995d4b9792d207e6d6882c8e",
      "End": "8cced67261dc4d129d4702432b015fe2",
      "Id": "1b3eb63e3d6045748d1d1ac0d7f43812"
    },
    {
      "Start": "3e555b687cd04b999a283d46dc0da630",
      "End": "e1a0327604d442cab955da4ee5ab73ab",
      "Id": "266c3491328545b986f37fd5d6e2cc03"
    },
    {
      "Start": "a30d33de8c064db292dad29bde1bfe45",
      "End": "f7002d79fb51451a8b35988751e748df",
      "Id": "99319ab010294e7ba7bd3f91df3912db"
    },
    {
      "Start": "ad778ea729e24a3aaa424bd5f0216aae",
      "End": "1026ff46dd4548ce9e626850dcc36c9d",
      "Id": "baafc5030f914205b4a242ff4917cb24"
    },
    {
      "Start": "82a989ad9ea14974bf92ecf99a8ab857",
      "End": "0be8e9fc04dd410fb5874a181ada005d",
      "Id": "7691135fb4d94e819c973a70827f8771"
    },
    {
      "Start": "82a989ad9ea14974bf92ecf99a8ab857",
      "End": "41e304d81bef4a7b90e922c7088adf43",
      "Id": "e1cf195bc0884c288c78401a7654f6ad"
    },
    {
      "Start": "82a989ad9ea14974bf92ecf99a8ab857",
      "End": "622244765fea47f8ad14d873a009ce68",
      "Id": "8af1676e74c14382b0c29fafef4e80fd"
    },
    {
      "Start": "82a989ad9ea14974bf92ecf99a8ab857",
      "End": "9765cbf85fa3491191b2a25aa46f5088",
      "Id": "a8f4c63e1c7444688028c5a6b568d5a4"
    },
    {
      "Start": "58ee947fd55d41de908c3c8b672111e4",
      "End": "e010c99aa7574122b3c10a4a25baef30",
      "Id": "ec04c0fa8f22497eb3237a100f85a6ab"
    },
    {
      "Start": "a0d1c28fef554d8eadd5092ae9bff8f5",
      "End": "057963fa4a194cb89ac6a04d44282d59",
      "Id": "d3719f039f4c4863ad6dafdc8c36d3d2"
    },
    {
      "Start": "6278b7be5dc0472c9fd9f6546b1236f3",
      "End": "c8311320fa1a46bf81bde1359b89b843",
      "Id": "2805957d112c4c3e9e312d245034bb8d"
    },
    {
      "Start": "7dc8e0089ff04f008dd27c75fc144520",
      "End": "12e79d73fa284b468ec34a97157738a6",
      "Id": "d93b14878dfc4aeeb6989913970e303e"
    },
    {
      "Start": "38ce6b13305442d2bf9f23d1d20f7a06",
      "End": "38a7de9dd8fa4e6b9bdd18d7f8056235",
      "Id": "dceb0d2467484c57b9531d946453b81c"
    },
    {
      "Start": "dc39e5b8461d4beda94e1416f30b0bf5",
      "End": "7fdeee0aa63f451aa622311cd3dadb6c",
      "Id": "181d6bf07cc04a169c8ce202f7b1eb98"
    },
    {
      "Start": "fe510c34ea3c4703bac8b600bdc25b1b",
      "End": "cafa3260ccc4454d91248f6cee4a7305",
      "Id": "ce9bb2619ecc4ef692dcf0bf26bae509"
    },
    {
      "Start": "ae64e709a69a49cf8a3c4781f3ab9283",
      "End": "ddb9322ee2f1466b81f5e8240b0c08e2",
      "Id": "110be50a036c4eaeba3c40cac5bfbd02"
    },
    {
      "Start": "ae64e709a69a49cf8a3c4781f3ab9283",
      "End": "0a8c2991c1b742b0816d3e55799cab4f",
      "Id": "ad001a7fc84a40b59c013a96f9b36cd9"
    },
    {
      "Start": "ae64e709a69a49cf8a3c4781f3ab9283",
      "End": "bb571fb6f4c74ee5aea74ac25606cced",
      "Id": "c9e9d4128643465db16dd346186b6da7"
    },
    {
      "Start": "863fbd3b77824199a9161ca200683df7",
      "End": "31d0d8d74e4f4a7c9993c112320a1b73",
      "Id": "bc0b9d97875941db9783dbe65ad229f9"
    },
    {
      "Start": "53280461283b449b86f7598a2e52ff4e",
      "End": "64e0289bf5f24824a56727a8986e72c6",
      "Id": "ed10d2f77a6c49719f1211ddc61f2bf6"
    },
    {
      "Start": "53280461283b449b86f7598a2e52ff4e",
      "End": "bdf4ea4fe2cc4ccab43182b8027f708f",
      "Id": "213b51b70ac345028ef92b9c3d248de0"
    },
    {
      "Start": "de806dd7c587495c9f245ff94d9d56c2",
      "End": "5383e81e63dd4e8498f98e8a3baa1da6",
      "Id": "51930c1f372846679ba31b1e83c5e19c"
    },
    {
      "Start": "cf90af3e884547619db540525b9e2d00",
      "End": "67b176edc14f4a47aca7e8021cdd1e00",
      "Id": "64897273d4aa4f5d9453d2e4d2f66f5d"
    },
    {
      "Start": "78c2bd93a7444c0f9b40953922177e3a",
      "End": "c13923a87de64a7ea5bd1a78ddb90ba4",
      "Id": "973dcb883fd740e4a6195e0577a594cb"
    },
    {
      "Start": "ba6595fe6093423a8ba8bb612730e33e",
      "End": "8523cb95bea34a519c4ee5cd91be1bd3",
      "Id": "adada457b5d24728a283abb68350254b"
    },
    {
      "Start": "53df03993fb4480d888cafcf366fd25e",
      "End": "c077198b0bfb482697b9d82752a5665e",
      "Id": "324be1cf6e384cb3b3f91df709420456"
    },
    {
      "Start": "53df03993fb4480d888cafcf366fd25e",
      "End": "449f8ba88d07414793732eeb9501fbaf",
      "Id": "6fc9e231a7d14f9c8ffbc99e45be3ad7"
    },
    {
      "Start": "53df03993fb4480d888cafcf366fd25e",
      "End": "c6e7ecd99e7342db8c504713eca68126",
      "Id": "12065924d42f43f0940883b9388ca243"
    },
    {
      "Start": "885acc835cbd4b7bbd35267477c88bfd",
      "End": "3f523459502f4324bc48f2735bd47f67",
      "Id": "f5ace3497d1a4c8fb29ce3fc24cff8bd"
    },
    {
      "Start": "1f1ad3d646f14264bccc4a511348ee18",
      "End": "7ad51209d0604bbd906beee76bcf51b3",
      "Id": "3b9328c48bc7455ca9fbe9005f22e2cc"
    }
  ],
  "Dependencies": [
    "4eb5579e-5a50-470f-b454-934df2193507",
    "19ce6b9f-f4cf-4a3f-9788-1482e94528d6",
    "65edb8e5-3afc-4a3d-aa04-74f7dd492024"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Clockwork for Dynamo 2.x",
      "Version": "2.3.0",
      "ReferenceType": "Package",
      "Nodes": [
        "aa7d7d28cc1149ebbb9fe3a111a990cf"
      ]
    }
  ],
  "Author": "None provided",
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.0.5650",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Data.ImportCSV",
        "Id": "4aaca0c81c3e42a1afc0ccd2b191490b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4513.8610770086152,
        "Y": 3288.0172996294496
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "4dcedf2f18dc4932b66317311a74457a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4257.68197253101,
        "Y": 3361.01729962945
      },
      {
        "ShowGeometry": false,
        "Name": "101_getFileDirectory",
        "Id": "27a215880e554613b867d59bdb98157b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4257.6819725310052,
        "Y": 3241.0172996294496
      },
      {
        "ShowGeometry": false,
        "Name": "102_setGlobalParameters",
        "Id": "da1c7216f4cf40bd97393593c4339855",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4806.5914967312747,
        "Y": 3263.2964254468793
      },
      {
        "ShowGeometry": true,
        "Name": "Parameters_by_level (no constraints)",
        "Id": "351a824d5a8b4a26a190854d7a4bb248",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5143.8642454773753,
        "Y": 3270.7483476570392
      },
      {
        "ShowGeometry": true,
        "Name": "Floor Types",
        "Id": "be3b10a377bb4a9093a619d122a65e70",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3971.9869408663735,
        "Y": 3735.281041380953
      },
      {
        "ShowGeometry": true,
        "Name": "boundary_min",
        "Id": "cdfa961c9847461d92f30c2ba5596a50",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4594.9975476148729,
        "Y": 3741.9329907956244
      },
      {
        "ShowGeometry": true,
        "Name": "constraintsForZones",
        "Id": "a7e95e77e3954f618a17fdaa9df00d7c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5475.2481415686534,
        "Y": 3468.2947263856895
      },
      {
        "ShowGeometry": true,
        "Name": "constraintsForSpaces",
        "Id": "1bfc5d7733724849b64437ffb7373b8d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5479.1815724028929,
        "Y": 3528.7838784674987
      },
      {
        "ShowGeometry": true,
        "Name": "constraintsForStoreys",
        "Id": "e76e21f8b73545488f2680af27015141",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5472.2385919969829,
        "Y": 3407.3902088989571
      },
      {
        "ShowGeometry": true,
        "Name": "Roof Types",
        "Id": "3e0fa77c41374599b91332585e6fb2a9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3971.9869408663735,
        "Y": 3819.6888024345571
      },
      {
        "ShowGeometry": true,
        "Name": "Reference Point",
        "Id": "7e5cd5bbb63c41a3a678c6a54beec3a5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5466.7599335331033,
        "Y": 3826.1377554180381
      },
      {
        "ShowGeometry": true,
        "Name": "boundary_max",
        "Id": "6cbe793e631049d7a2f770fd21177d63",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4594.9975476148729,
        "Y": 3825.5063241289572
      },
      {
        "ShowGeometry": false,
        "Name": "107_createReferences",
        "Id": "9c57fc090431475ab3ffaa78bb07ce36",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5890.5808290554933,
        "Y": 3821.9244220847049
      },
      {
        "ShowGeometry": true,
        "Name": "Wall Types (interior)",
        "Id": "359879f7b851408daa085bf67e19bd56",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3971.9869408663735,
        "Y": 3904.0965634881622
      },
      {
        "ShowGeometry": true,
        "Name": "step_value",
        "Id": "bf49c602c5954a53a8bae278c3db4b9f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4594.9975476148729,
        "Y": 3909.07965746229
      },
      {
        "ShowGeometry": true,
        "Name": "boundary values",
        "Id": "a6469d73c55f4f06ad1f063425bfcf0b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5031.973396106413,
        "Y": 3798.4395918873597
      },
      {
        "ShowGeometry": false,
        "Name": "103_constraints2Storey",
        "Id": "4e1fb8e8d52c43329704384af395596a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5755.0685702493029,
        "Y": 3229.3558256717315
      },
      {
        "ShowGeometry": true,
        "Name": "Wall Types (exterior)",
        "Id": "e32c2c834fb642f38f524f06f6cdc51a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3971.9869408663735,
        "Y": 3986.365868981211
      },
      {
        "ShowGeometry": false,
        "Name": "108-createGeo",
        "Id": "62c40dfc8ec649018e4d8ab670a42361",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6120.7182829216636,
        "Y": 3768.1284437404311
      },
      {
        "ShowGeometry": false,
        "Name": "100_setMaterial",
        "Id": "02af2caa4b5646beb4d45a1652d7495e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4412.7247236427829,
        "Y": 4063.8214870054485
      },
      {
        "ShowGeometry": true,
        "Name": "Window Types",
        "Id": "915ee9f9feb24cfc86293d0aecf86452",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3971.9869408663735,
        "Y": 4069.7044022545374
      },
      {
        "ShowGeometry": true,
        "Name": "Door Types (interior)",
        "Id": "ab4dbfeeaf224b96887f45da12b01413",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3971.9869408663735,
        "Y": 4153.0429355278648
      },
      {
        "ShowGeometry": true,
        "Name": "Interior_door_slider",
        "Id": "272b16050ee24e6fae04195ef017b45a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6124.2337694302532,
        "Y": 4102.435001779173
      },
      {
        "ShowGeometry": true,
        "Name": "Exterior_window_height",
        "Id": "a8d0477d729a481193d72bd90146844f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6122.2200621907532,
        "Y": 4004.7199500074257
      },
      {
        "ShowGeometry": true,
        "Name": "Door Types (exterior)",
        "Id": "b305e7ae621c4dac89ede224b748e3cc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3971.9869408663735,
        "Y": 4237.4506965814689
      },
      {
        "ShowGeometry": true,
        "Name": "Exterior_window_slider",
        "Id": "9d29380d57a74875a36c76878d134c78",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6122.2781463628135,
        "Y": 3910.8434212551419
      },
      {
        "ShowGeometry": false,
        "Name": "105_constraints2Spaces",
        "Id": "3b3efc4777dc44ee820d335e09c5bce7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6423.2049242868234,
        "Y": 3495.2215303429584
      },
      {
        "ShowGeometry": false,
        "Name": "104_constraints2Zones",
        "Id": "4651ffc3e9e8427e89f72be223a99689",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6151.7410637711027,
        "Y": 3334.1351068112654
      },
      {
        "ShowGeometry": false,
        "Name": "109_exitReferences",
        "Id": "6c2d6cb4b6ca455ead08cdf64dc2a7d1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6124.5329523222736,
        "Y": 4187.9779994679066
      },
      {
        "ShowGeometry": false,
        "Name": "106_integrateConstraints",
        "Id": "3102de75af8f4b008666acf732e13b7d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6697.0036579725929,
        "Y": 3235.5136876535444
      },
      {
        "ShowGeometry": false,
        "Name": "110_createOpenings",
        "Id": "59737b542ebd405198c6430cbac6a11c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6848.9555065024533,
        "Y": 3956.7544431090873
      },
      {
        "ShowGeometry": false,
        "Name": "111_createSeparators",
        "Id": "09312c017a064202b4d7abf2c61d41c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7043.5418336577641,
        "Y": 3182.1608008738076
      },
      {
        "ShowGeometry": true,
        "Name": "Select Phase",
        "Id": "b3b25864266d4c7cac2dbedb9aa61a99",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7048.988345095604,
        "Y": 3334.2630713166695
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "13fc9e9896b64989823ace0ffe105a4f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7073.3238563932537,
        "Y": 3785.7334400877744
      },
      {
        "ShowGeometry": false,
        "Name": "114_saveModel",
        "Id": "4062275cb7ce4dd2abd09c6a0a792451",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7065.04518592772,
        "Y": 4085.26795316381
      },
      {
        "ShowGeometry": true,
        "Name": "Healing-PlanExport",
        "Id": "fe0a078f299b4798b5c0f36444ee5fd9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7066.48539971296,
        "Y": 4209.33132264576
      },
      {
        "ShowGeometry": false,
        "Name": "112_placeSpaces",
        "Id": "366aab9c8864405ba85aed278ec52f67",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7305.2281658487518,
        "Y": 3275.7810403605454
      },
      {
        "ShowGeometry": true,
        "Name": "Document.SaveAs",
        "Id": "aa7d7d28cc1149ebbb9fe3a111a990cf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7307.85768422062,
        "Y": 4090.60954501337
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "397f037952c041188eab3c2a27ec0e1e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7522.1161638759841,
        "Y": 3428.2900187131154
      },
      {
        "ShowGeometry": false,
        "Name": "113_extractInput",
        "Id": "af7a11a1216d4f33b8a9c4410f7cec0e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7670.1754663660977,
        "Y": 3791.1586294850667
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "ee32d31493424e39a10b55027ea56359",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8088.4794450353129,
        "Y": 4088.117506479944
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "1873ef7659c34ae48ebbd0aa6bc5d925",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8090.0117639877135,
        "Y": 4148.2729147525033
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "7120c7a4d86f4142be2f7a051459076d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8091.7563693512348,
        "Y": 4216.2194529348144
      },
      {
        "ShowGeometry": true,
        "Name": "Healing-Compliance",
        "Id": "a2e1c7dc60e04f9baa3def969cda0569",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7702.3857083789871,
        "Y": 4087.6604861706342
      },
      {
        "ShowGeometry": true,
        "Name": "Healing-PlanExport",
        "Id": "6629dde6336e4d9b8fc1fc139741775d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8085.3952248545047,
        "Y": 4277.58919140478
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "0313fd95b0a840fc95edb8cbd0f9d832",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7700.4412378848783,
        "Y": 4278.4906657944885
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "57dabc392aef4bfb85efcdb1a5575426",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3982.25155252362,
        "Y": 3519.42766122568
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "232caf7d065a418781bd0bcf98667ce6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3980.9132415247495,
        "Y": 3239.65881685633
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "8deb945533d145c4a8e732e44050d19c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7073.9573182271142,
        "Y": 4303.43148759004
      }
    ],
    "Annotations": [
      {
        "Id": "525a793b78de4a449936db5e780a65ba",
        "Title": "Input1 : Initial Parameters\r\n",
        "Nodes": [
          "da1c7216f4cf40bd97393593c4339855",
          "4aaca0c81c3e42a1afc0ccd2b191490b",
          "4dcedf2f18dc4932b66317311a74457a",
          "351a824d5a8b4a26a190854d7a4bb248",
          "27a215880e554613b867d59bdb98157b",
          "232caf7d065a418781bd0bcf98667ce6",
          "57dabc392aef4bfb85efcdb1a5575426"
        ],
        "Left": 3970.9132415247495,
        "Top": 3114.3155332742404,
        "Width": 1469.51816813173,
        "Height": 473.12705332457381,
        "FontSize": 48.0,
        "InitialTop": 3239.65881685633,
        "InitialHeight": 424.76884436935006,
        "TextblockHeight": 115.34328358208955,
        "Background": "#FFB5B5B5"
      },
      {
        "Id": "e58b19b09b6a463992ff6d54b590bb3e",
        "Title": "Process - B : Build References \r\n(Storey, Zone, Space)\r\n",
        "Nodes": [
          "9c57fc090431475ab3ffaa78bb07ce36",
          "7e5cd5bbb63c41a3a678c6a54beec3a5"
        ],
        "Left": 5456.7599335331033,
        "Top": 3639.2677056667944,
        "Width": 637.25373134328584,
        "Height": 338.07462686567169,
        "FontSize": 48.0,
        "InitialTop": 3821.9244220847049,
        "InitialHeight": 149.21333333333314,
        "TextblockHeight": 172.65671641791045,
        "Background": "#FFC1D676"
      },
      {
        "Id": "664655c16ef8445daba71bdcf93a59ed",
        "Title": "Input3 : Tolerance of Constraints\r\n",
        "Nodes": [
          "bf49c602c5954a53a8bae278c3db4b9f",
          "cdfa961c9847461d92f30c2ba5596a50",
          "6cbe793e631049d7a2f770fd21177d63",
          "a6469d73c55f4f06ad1f063425bfcf0b"
        ],
        "Left": 4584.9975476148729,
        "Top": 3616.5897072135349,
        "Width": 852.43853505870447,
        "Height": 360.50487562188937,
        "FontSize": 48.0,
        "InitialTop": 3741.9329907956244,
        "InitialHeight": 312.14666666666562,
        "TextblockHeight": 115.34328358208955,
        "Background": "#FFB5B5B5"
      },
      {
        "Id": "52ede83739e54d539a9c1b2b2aedf1a1",
        "Title": "Input2 : Element Types\r\n",
        "Nodes": [
          "e32c2c834fb642f38f524f06f6cdc51a",
          "be3b10a377bb4a9093a619d122a65e70",
          "3e0fa77c41374599b91332585e6fb2a9",
          "02af2caa4b5646beb4d45a1652d7495e",
          "915ee9f9feb24cfc86293d0aecf86452",
          "ab4dbfeeaf224b96887f45da12b01413",
          "b305e7ae621c4dac89ede224b748e3cc",
          "359879f7b851408daa085bf67e19bd56"
        ],
        "Left": 3961.9869408663735,
        "Top": 3609.9377577988635,
        "Width": 616.91688725402128,
        "Height": 712.46581875882384,
        "FontSize": 48.0,
        "InitialTop": 3735.281041380953,
        "InitialHeight": 647.169655200516,
        "TextblockHeight": 115.34328358208955,
        "Background": "#FFB5B5B5"
      },
      {
        "Id": "902bcde726da4b0bb24a6657874d1c37",
        "Title": "Process - A: Apply constraints \r\n",
        "Nodes": [
          "3b3efc4777dc44ee820d335e09c5bce7",
          "4651ffc3e9e8427e89f72be223a99689",
          "4e1fb8e8d52c43329704384af395596a",
          "3102de75af8f4b008666acf732e13b7d",
          "e76e21f8b73545488f2680af27015141",
          "a7e95e77e3954f618a17fdaa9df00d7c",
          "1bfc5d7733724849b64437ffb7373b8d"
        ],
        "Left": 5462.2385919969829,
        "Top": 3104.012542089642,
        "Width": 1458.9740211994904,
        "Height": 520.83585392495843,
        "FontSize": 48.0,
        "InitialTop": 3229.3558256717315,
        "InitialHeight": 444.42805279576714,
        "TextblockHeight": 115.34328358208955,
        "Background": "#FFC1D676"
      },
      {
        "Id": "45ef5bd1fd2f4a53ad84f2535085f881",
        "Title": "Process - C : Create Geometry\r\n",
        "Nodes": [
          "272b16050ee24e6fae04195ef017b45a",
          "a8d0477d729a481193d72bd90146844f",
          "59737b542ebd405198c6430cbac6a11c",
          "9d29380d57a74875a36c76878d134c78",
          "62c40dfc8ec649018e4d8ab670a42361",
          "6c2d6cb4b6ca455ead08cdf64dc2a7d1"
        ],
        "Left": 6110.7182829216636,
        "Top": 3642.7851601583416,
        "Width": 931.64020865541625,
        "Height": 649.02866020508736,
        "FontSize": 48.0,
        "InitialTop": 3768.1284437404311,
        "InitialHeight": 564.84955572747549,
        "TextblockHeight": 115.34328358208955,
        "Background": "#FFC1D676"
      },
      {
        "Id": "aee2aff9343d415a8cf0e2bac6ac2099",
        "Title": "Process - D : Divide Spaces",
        "Nodes": [
          "09312c017a064202b4d7abf2c61d41c5",
          "b3b25864266d4c7cac2dbedb9aa61a99",
          "366aab9c8864405ba85aed278ec52f67",
          "397f037952c041188eab3c2a27ec0e1e"
        ],
        "Left": 7033.5418336577641,
        "Top": 3114.8473680379866,
        "Width": 813.08179290478711,
        "Height": 498.95011336169591,
        "FontSize": 48.0,
        "InitialTop": 3182.1608008738076,
        "InitialHeight": 391.12921783930778,
        "TextblockHeight": 57.3134328358209,
        "Background": "#FFC1D676"
      },
      {
        "Id": "a5377cab7f4e4507ac4ec98be9168216",
        "Title": "Process - E1 : Export the input data \r\n",
        "Nodes": [
          "13fc9e9896b64989823ace0ffe105a4f",
          "af7a11a1216d4f33b8a9c4410f7cec0e"
        ],
        "Left": 7063.3238563932537,
        "Top": 3660.3901565056849,
        "Width": 779.478475644486,
        "Height": 260.39533865102385,
        "FontSize": 48.0,
        "InitialTop": 3785.7334400877744,
        "InitialHeight": 150.42518939729234,
        "TextblockHeight": 115.34328358208955,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "169ae3054b1d474f83c8030ce8040f9a",
        "Title": "Process - E2 : Export the output data\r\n",
        "Nodes": [
          "4062275cb7ce4dd2abd09c6a0a792451",
          "aa7d7d28cc1149ebbb9fe3a111a990cf",
          "fe0a078f299b4798b5c0f36444ee5fd9",
          "a2e1c7dc60e04f9baa3def969cda0569",
          "ee32d31493424e39a10b55027ea56359",
          "1873ef7659c34ae48ebbd0aa6bc5d925",
          "7120c7a4d86f4142be2f7a051459076d",
          "6629dde6336e4d9b8fc1fc139741775d",
          "0313fd95b0a840fc95edb8cbd0f9d832",
          "8deb945533d145c4a8e732e44050d19c"
        ],
        "Left": 7055.04518592772,
        "Top": 3959.9246695817205,
        "Width": 1236.9665780599935,
        "Height": 411.52174338145369,
        "FontSize": 48.0,
        "InitialTop": 4085.26795316381,
        "InitialHeight": 363.16353442622994,
        "TextblockHeight": 115.34328358208955,
        "Background": "#FF48B9FF"
      }
    ],
    "X": -1378.0742530337661,
    "Y": -849.20293539144484,
    "Zoom": 0.33284265308796718
  }
}